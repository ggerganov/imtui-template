#pragma once

#include <string>
#include <vector>

struct Log {
    std::string username;
    std::string text;
};

const std::vector<Log> kLogs = {
    { "dirbaio[m]", R"foo(oh lol and the proxy forwards the logs)foo" },
    { "jschievink", R"foo(yeah, that part works surprisingly well)foo" },
    { "dirbaio[m]", R"foo(🤯)foo" },
    { "jschievink", R"foo(hat way users don't have to wait for me to copy the logs over)foo" },
    { "therealprof[m]", R"foo(adamgreig: Any chance to get a signoff on the newsletter?)foo" },
    { "dirbaio[m]", R"foo(it's somewhat crazy rube-goldberg-esque 😂)foo" },
    { "jschievink", R"foo(yeah)foo" },
    { "jschievink", R"foo(I'm kinda hoping the blog post makes github engineers terrified of me and fix the runner security issues by themselves)foo" },
    { "dirbaio[m]", R"foo(hahahaha)foo" },
    { "jschievink", R"foo(hen we won't need hacks like this)foo" },
    { "dirbaio[m]", R"foo(he runner code is huuuuge, have fun securing tha)foo" },
    { "jschievink", R"foo(hey just need to integrate the small patches rust-lang/rust uses)foo" },
    { "jschievink", R"foo(mostly the ability to filter events to not have it run on pull_request events)foo" },
    { "dirbaio[m]", R"foo(but what if I do want it to run on PRs?)foo" },
    { "dirbaio[m]", R"foo(if it can be properly secured, it's nice that someone can send a PR and get their stuff tested instantly without waiting for any approval)foo" },
    { "jschievink", R"foo(you want to grant arbitrary access to hardware?)foo" },
    { "dirbaio[m]", R"foo(what's the worst someone could do?)foo" },
    { "jschievink", R"foo(brick it, presumably)foo" },
    { "dirbaio[m]", R"foo(is it common to be able to brick chips?)foo" },
    { "jschievink", R"foo(I would assume so, yeah)foo" },
    { "jschievink", R"foo(many chips can disable SWD access)foo" },
    { "dirbaio[m]", R"foo(on nrfs you can enable APPROTECT (disables swd debugging) but you can always do the recover operation to erase and unlock the chip)foo" },
    { "jschievink", R"foo(you can also short out pins)foo" },
    { "jschievink", R"foo(depending on the current the chip can source/sink through GPIOs that might destroy it fairly quickly)foo" },
    { "jschievink", R"foo(requires you to mess with alternate functions and such, but you can do it even with no pins physically connected)foo" },
    { "dirbaio[m]", R"foo(uh what? you can enable 2 functions on the same pin, then get one to outputlow and the other high at the same time?)foo" },
    { "jschievink", R"foo(if you do want the runner to run on PRs then I think some sort of ephemeral VM setup like rust-lang uses would be appropriate)foo" },
    { "dirbaio[m]", R"foo(I was thinking of containers..)foo" },
    { "jschievink", R"foo(hmm, can you not short them out that way? I suppose there might only be one driver per pin...)foo" },
    { "dirbaio[m]", R"foo(no idea)foo" },
    { "jschievink", R"foo(containers could also work, but I haven't even figured out how to run the thing as non-roo)foo" },
    { "dirbaio[m]", R"foo(but that sounds strange coming from the nrf)foo" },
    { "dirbaio[m]", R"foo(containers are not secure)foo" },
    { "dirbaio[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party containers are not as secure)foo" },
    { "dirbaio[m]", R"foo(but super fast to start up)foo" },
    { "jschievink", R"foo(certainly that STM32 that just has multiple pads bonded to the same pin can be shorted out like tha)foo" },
    { "dirbaio[m]", R"foo(and no one's going to burn a kernel 0day on hacking some oss project's ci for the lulz)foo" },
    { "jschievink", R"foo(I'm currently using this docker image, but it doesn't work rootless: https://hub.docker.com/r/myoung34/github-runner)foo" },
    { "dirbaio[m]", R"foo(root inside a container is not considered dangerous)foo" },
    { "dirbaio[m]", R"foo(what's dangerous is if the container has --privileged)foo" },
    { "jschievink", R"foo(is that not equivalent to root outside the container anymore?)foo" },
    { "dirbaio[m]", R"foo(anymore? since when has i)foo" },
    { "dirbaio[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party anymore? when has it been?)foo" },
    { "dirbaio[m]", R"foo(what CMakeLists.txt dangerous is mounting `-v /var/run/docker.sock:/var/run/docker.sock`)foo" },
    { "dirbaio[m]", R"foo(access to docker.sock is equivalent to root on the host hehe)foo" },
    { "jschievink", R"foo(hmm, I thought it was dangerous in general)foo" },
    { "jschievink", R"foo(apparently my container knowledge is grossly outdated and/or wrong)foo" },
    { "dirbaio[m]", R"foo(ideally the runner would run on the hos)foo" },
    { "dirbaio[m]", R"foo(and spawn an ephemeral container per job)foo" },
    { "dirbaio[m]", R"foo(if you run the runner inside docker it doesn't gain you much security anyway)foo" },
    { "dirbaio[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party if you run the runner inside the container it doesn't gain you much security anyway)foo" },
    { "dirbaio[m]", R"foo(because for example malicious job can steal your runner's credentials)foo" },
    { "dirbaio[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party because for example a malicious job can steal your runner's credentials)foo" },
    { "jschievink", R"foo(it does also spawn containers to run the actions in)foo" },
    { "dirbaio[m]", R"foo(but isn't that opt-in?)foo" },
    { "jschievink", R"foo(hmm, is it? I thought no)foo" },
    { "jschievink", R"foo(ah, maybe jobs that just run a command are ran as-is)foo" },
    { "dirbaio[m]", R"foo(https://github.com/akiles/embassy/runs/1914993978?check_suite_focus=true)foo" },
    { "dirbaio[m]", R"foo(yeah, `run: echo lol` simply... gets run :D)foo" },
    { "dirbaio[m]", R"foo(no ocker)foo" },
    { "dirbaio[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party no docker)foo" },
    { "dirbaio[m]", R"foo(RCE vuln as a service 👌)foo" },
    { "agg", R"foo(i wouldn't be surprised if github did notice you)foo" },
    { "agg", R"foo(hey actively look for CI stuff)foo" },
    { "agg", R"foo(https://securitylab.github.com/advisories/GHSL-2020-244-nonebot-nonebot2-workflow)foo" },
    { "agg", R"foo(I think what they actually do is search for every workflow using 'pull_request_target', pre-emptively open a security issue, and then double check it's definitely vulnerable)foo" },
    { "jschievink", R"foo(oh, cool)foo" },
    { "jschievink", R"foo(yeah maybe they automatically flag users for a deeper audi)foo" },
    { "agg", R"foo(yea, I think pull_request_target is quite a volatile footgun)foo" },
    { "dirbaio[m]", R"foo(hm, bu)foo" },
    { "dirbaio[m]", R"foo(so the actions (steps with `uses: blah`) run sandboxed separately from steps with `run: blah`?)foo" },
    { "jschievink", R"foo(I thought so, but the more I look into this the less I understand i)foo" },
    { "dirbaio[m]", R"foo(so if you give your github token to one of these actions, it's still supposed to be safe from evil code?)foo" },
    { "jschievink", R"foo(maybe I just made that up for some reason)foo" },
    { "jschievink", R"foo(I read something about nested containers though)foo" },
    { "dirbaio[m]", R"foo(welp that must be the special sauce in their cloud runners)foo" },
    { "dirbaio[m]", R"foo(selfhosted runners is "just run shit on the host yolo")foo" },
    { "jschievink", R"foo(he cloud runners run in ephemeral VMs from what I know)foo" },
    { "agg", R"foo(I don't believe actions run separately to plain run: steps)foo" },
    { "agg", R"foo(or at least, they share the same filesystem?)foo" },
    { "dirbaio[m]", R"foo(yea they do)foo" },
    { "dirbaio[m]", R"foo(hat's why I don't get what the vuln is)foo" },
    { "jschievink", R"foo(maybe I was thinking of gitlab? where you do actually specify a docker image)foo" },
    { "jschievink", R"foo(not sure anymore :D)foo" },
    { "agg", R"foo(gitlab's ci seems much more sane and amenable to these things)foo" },
    { "dirbaio[m]", R"foo(yeah on gitlab you do specify image for steps)foo" },
    { "agg", R"foo(dirbaio[m]: which vuln?)foo" },
    { "agg", R"foo(he one I linked?)foo" },
    { "dirbaio[m]", R"foo(yeah)foo" },
    { "agg", R"foo(anyone who opens a PR can run arbitrary code in your CI)foo" },
    { "dirbaio[m]", R"foo(like)foo" },
    { "agg", R"foo(including leaking your secrets)foo" },
    { "agg", R"foo(which they can then use to impersonate your.. github account?)foo" },
    { "agg", R"foo(or the github repo anyway)foo" },
    { "dirbaio[m]", R"foo(yeah, but why can't they do that writing custom `run: ` steps anyway?)foo" },
    { "agg", R"foo(it wouldn't get run)foo" },
    { "dirbaio[m]", R"foo(why)foo" },
    { "agg", R"foo(github does not typically execute workflow code from a pull reques)foo" },
    { "agg", R"foo(uh)foo" },
    { "agg", R"foo(in an environment with secrets, I mean)foo" },
    { "jschievink", R"foo(`pull_request` triggers do not get any secrets)foo" },
    { "agg", R"foo(when a PR triggers a CI run, no secrets are available to that CI execution)foo" },
    { "jschievink", R"foo(and also no privileged `GITHUB_TOKEN`)foo" },
    { "agg", R"foo(when using pull_request_target instead, the secrets are available, but it uses the PR's _base_ branch to load the workflow)foo" },
    { "agg", R"foo((and ignores the PR's workflow files))foo" },
    { "dirbaio[m]", R"foo(okay so `run: ` stuff runs with no secrets, but that `nonebot` action does run with secrets?)foo" },
    { "dirbaio[m]", R"foo(<agg "when using pull_request_target i")foo" },
    { "jschievink", R"foo(whether you have or don't have secrets is a property of the whole workflow run)foo" },
    { "jschievink", R"foo(either all steps and jobs have them, or none do)foo" },
    { "agg", R"foo(yea)foo" },
    { "agg", R"foo(and for a normal pull_request, no secrets but the PR's workflow file is run, for a pull_request_target, you get secrets, and use the repo's existing workflow)foo" },
    { "agg", R"foo(he vuln is that the PR could include content that caused the repo's existing workflow to run arb code)foo" },
    { "dirbaio[m]", R"foo(I see, so it's not for testing code in the PR)foo" },
    { "dirbaio[m]", R"foo(it's for doing automation shit like labeling and assigning people)foo" },
    { "dirbaio[m]", R"foo(and it runs with the yaml and code from master)foo" },
    { "agg", R"foo(yea)foo" },
    { "agg", R"foo(e.g. in stm32-rs I use it to push to the mmaps repo and add a comment with a link)foo" },
    { "dirbaio[m]", R"foo(and the vuln is that action running from master is explicitly checking out the pr's code and running i)foo" },
    { "agg", R"foo(but pushing to that repo requires a secret (a repo key) and leaving a comment requires GITHUB_TOKEN)foo" },
    { "dirbaio[m]", R"foo(yeaaaah)foo" },
    { "dirbaio[m]", R"foo(makes sense)foo" },
    { "agg", R"foo(yea)foo" },
    { "agg", R"foo(github recommend you do not check out the PR's code, ideally)foo" },
    { "agg", R"foo(but if you do check it out, don't run code from i)foo" },
    { "agg", R"foo(hey suggest you use the PR's CI to trigger a second CI job that runs in the repo context instead of using pull_request_target, but it's not clear to me how much that helps really)foo" },
    { "agg", R"foo(a bit, maybe)foo" },
    { "agg", R"foo(if your CI ultimately involves like, building the submitted PR, it's probably game over)foo" },
    { "agg", R"foo(in stm32-rs I pull in the inert yaml from the PR, svdtools uses yaml.safe_load to avoid that hilarity, so unless you can get code execution from a yaml file it should be ok, bu)foo" },
    { "agg", R"foo(you probably can get code execution from yaml, lol, yaml's a mess)foo" },
    { "agg", R"foo(originally it also happened to copy extract.sh which unzips the vendor svd zip files, which would have also been game over if some PR added lols to extract.sh)foo" },
    { "dirbaio[m]", R"foo(heheeee 😈)foo" },
    { "agg", R"foo(very 'sausage factory', don't look too close)foo" },
    { "dirbaio[m]", R"foo(microsoft loves their uuids 😤)foo" },
    { "agg", R"foo(i wonder if you could use 'bors try' to make it work ok)foo" },
    { "agg", R"foo(bors is able to push to the trying branch, you can have a CI workflow on push:trying which would get secrets)foo" },
    { "agg", R"foo(only authorised users can trigger 'bors try')foo" },
    { "agg", R"foo(anyway doesn't help with the custom runner directly because it would still run all the other PRs, heh)foo" },
    { "jschievink", R"foo(yeah, that's basically what I'm relying on right now)foo" },
    { "dirbaio[m]", R"foo(also, no websockets, just http long polling. And lots of POSTs to upload logs 🤯)foo" },
    { "dirbaio[m]", R"foo(it doesn't seem THAT bad though)foo" },
    { "dirbaio[m]", R"foo(it seems feasible to me to implement some subset that supports only `run` steps)foo" },
    { "dirbaio[m]", R"foo(enforcing non-privileged container per job)foo" },
    { "agg", R"foo(a non-priv container... that can still access the HIL you have attached?)foo" },
    { "agg", R"foo(I guess maybe you could add a list of users allowed to trigger jobs and just not run any from unknown users?)foo" },
    { "dirbaio[m]", R"foo(I think you can mount just one usb device)foo" },
    { "agg", R"foo(e.g. allow all repo/org members to run jobs right away, somehow require approval for others? idk)foo" },
    { "agg", R"foo(at this point it might be easier to just build a webhook that receives comments/prs from github api and then fetches the relevant code, the downside is not getting to use github yaml actions)foo" },
    { "agg", R"foo(but if you're writing your own runner anyway.....)foo" },
    { "agg", R"foo((e.g. your own self hosted bors, but it does hil testing))foo" },
    { "dirbaio[m]", R"foo(yeah reimplementing a runner is probably stupid)foo" },
    { "dirbaio[m]", R"foo(he nice thing is it'd reuse the GHA UI)foo" },
    { "dirbaio[m]", R"foo(otherwise you'd have to have some UI so users can see the logs)foo" },
    { "agg", R"foo(yea, true)foo" },
    { "dirbaio[m]", R"foo(but at that point installing something like drone is maybe easier)foo" },
    { "agg", R"foo(hmm)foo" },
    { "agg", R"foo(or gitlab I guess)foo" },
    { "agg", R"foo(you could probably set up gitlab to run only approved PRs from github, but make the logs public)foo" },
    { "dirbaio[m]", R"foo(external ci is not available on gitlab free anymore)foo" },
    { "agg", R"foo(ah)foo" },
    { "agg", R"foo(i guess you could DIY that part with a script that gets github api events and triggers gitlab api events, but meh)foo" },
    { "dirbaio[m]", R"foo(meh indeed)foo" },
    { "dirbaio[m]", R"foo(and they switched drone to a freemium license where the OSS version is very restricted :P)foo" },
    { "agg", R"foo(of course)foo" },
    { "agg", R"foo(gotta get that big corp megabucks I guess)foo" },
    { "dirbaio[m]", R"foo(yep everyone's trying to extract money like crazy from CI stuff)foo" },
    { "agg", R"foo(I can only assume someone's paying for i)foo" },
    { "dirbaio[m]", R"foo(you could say even github itself doesn't want their selfhosted runner to be "too good" so they can sell you more actions minutes)foo" },
    { "agg", R"foo(at least they'll sell you them by the minute I guess)foo" },
    { "agg", R"foo(Travis...)foo" },
    { "dirbaio[m]", R"foo(you're compiling the C code to a .a then linking everything from Rust?)foo" },
    { "dirbaio[m]", R"foo(you're probably missing linking with a libc)foo" },
    { "i_am_the_carl[m]", R"foo(That would make sense... hold on I think the cc crate had something for that.)foo" },
    { "i_am_the_carl[m]", R"foo(Hmm, I guess the CC crate didn't have that.)foo" },
    { "i_am_the_carl[m]", R"foo(Actually this may do the job.)foo" },
    { "i_am_the_carl[m]", R"foo(https://crates.io/crates/tinyrlibc)foo" },
    { "i_am_the_carl[m]", R"foo(In the end I couldn't get that working ether, but found a way to disable the feature in FreeRTOS that required the strlen function.)foo" },
    { "therealprof[m]", R"foo(The annoying part of GHA is really the completely lackluster documentation, I don't even want to know how many hours we burned to figure out how it works.)foo" },
    { "korken89[m]", R"foo(The trait is only used to do weird pointer stuff in the background)foo" },
    { "korken89[m]", R"foo(And there are 2 cases that need to be handled, slices and non-slices in this case...)foo" },
    { "chrysn[m]", R"foo(korken89: i *think* you can use any's downcast functionality even when you're not in a `dyn Any` situation)foo" },
    { "korken89[m]", R"foo(Can it detect slices?)foo" },
    { "korken89[m]", R"foo(I think you need if statements for each slice type then)foo" },
    { "chrysn[m]", R"foo(oh so you mean any kind of slice ... that sounds harder)foo" },
    { "Lumpio-", R"foo(Aren't all the Any functions implemented for dyn Any only tho)foo" },
    { "korken89[m]", R"foo(I sort of would have expected this to work)foo" },
    { "korken89[m]", R"foo(https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0924d9c3bfab41d9f3f0d7ac5a3cd058)foo" },
    { "chrysn[m]", R"foo(you're right, they're just implemented for `dyn Any`; however, when a function is generic, a locally created dynamically typed thing might be optimzied out right away.)foo" },
    { "korken89[m]", R"foo(Oh it was a small error)foo" },
    { "korken89[m]", R"foo(This worked: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=71bead2df403c018c26dd24e4bcec1ef)foo" },
    { "korken89[m]", R"foo(:D)foo" },
    { "chrysn[m]", R"foo(yay :-))foo" },
    { "korken89[m]", R"foo(I was 100% sure this would require specialization)foo" },
    { "chrysn[m]", R"foo(probably it's only specialization if there's any chance something might fit both (and [T] and &T are mutually exclusive))foo" },
    { "korken89[m]", R"foo(Seems so)foo" },
    { "korken89[m]", R"foo(Hmm, turned out to get a unified interface though was difficul)foo" },
    { "korken89[m]", R"foo(`print_is_slice(&a)` and `print_is_slice(&b)`)foo" },
    { "korken89[m]", R"foo(One now needs to do `print_is_slice(&a)` and `print_is_slice(b)`)foo" },
    { "korken89[m]", R"foo(And changing one of the impls to add/remove `&` in the type causes the implementations to collide)foo" },
    { "chrysn[m]", R"foo(maybe you can have a default implementation in the trait (that says "is-slice = no", and then have one implementation `for T where T: IsActuallySlice` that overrides it to say is-slice = yes?)foo" },
    { "korken89[m]", R"foo(Hmm)foo" },
    { "korken89[m]", R"foo(Could you make an example? I am not quite following)foo" },
    { "chrysn[m]", R"foo(just on i)foo" },
    { "korken89[m]", R"foo(Thanks! :D)foo" },
    { "dirbaio[m]", R"foo(without specialization? O_o)foo" },
    { "korken89[m]", R"foo(Indeed)foo" },
    { "korken89[m]", R"foo(I want it on stable :))foo" },
    { "korken89[m]", R"foo(Else I need to solve it via a proc-macro)foo" },
    { "korken89[m]", R"foo(And that will suck :P)foo" },
    { "dirbaio[m]", R"foo(not sure that's possible)foo" },
    { "korken89[m]", R"foo(We are trying to get printing of slices to work in `dwarffmt`)foo" },
    { "korken89[m]", R"foo(And either I do it via a trait, or via the proc-macro that parses the formating string, and then we need a marker for slices instead)foo" },
    { "chrysn[m]", R"foo(hmpf, no -- that boils down to just the same issue :-()foo" },
    { "dirbaio[m]", R"foo(I don't get why does the code you linked even work)foo" },
    { "korken89[m]", R"foo(Magic 🪄)foo" },
    { "korken89[m]", R"foo(<chrysn[m] "hmpf, no -- that boils down to j")foo" },
    { "dirbaio[m]", R"foo(why does it with work with `for &T` but not with `for T`)foo" },
    { "chrysn[m]", R"foo(rying again with the &dyn Any approach...)foo" },
    { "korken89[m]", R"foo(I have no idea haha)foo" },
    { "korken89[m]", R"foo(But it does work :D)foo" },
    { "korken89[m]", R"foo(How far away is specialization now again? 😅)foo" },
    { "dirbaio[m]", R"foo(aaaah)foo" },
    { "dirbaio[m]", R"foo(it's implicitly T: Sized)foo" },
    { "korken89[m]", R"foo(N+1 years, where N is any integer?)foo" },
    { "dirbaio[m]", R"foo(and [T] is not Sized, so the impls don't overlap)foo" },
    { "korken89[m]", R"foo(Oh)foo" },
    { "korken89[m]", R"foo(Sneaky)foo" },
    { "chrysn[m]", R"foo(i mean there's always this hack: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=71bead2df403c018c26dd24e4bcec1ef)foo" },
    { "dirbaio[m]", R"foo(if you do `impl<T: ?Sized)foo" },
    { "chrysn[m]", R"foo(korken89: is this about debugging (evaluating ELF files with DWARF) or about a very small formatter?)foo" },
    { "korken89[m]", R"foo(very small formatter using DWARF)foo" },
    { "korken89[m]", R"foo(Think defm)foo" },
    { "korken89[m]", R"foo(But DWARF based)foo" },
    { "chrysn[m]", R"foo(ah ... but then it's about the (non-embedded) expansion step?)foo" },
    { "korken89[m]", R"foo(Ah no, we need to detect when performing the print on the MCU if it is a slice)foo" },
    { "korken89[m]", R"foo(So we send the entire slice and not just the ptr and len)foo" },
    { "korken89[m]", R"foo(And I can do it via the proc macro)foo" },
    { "korken89[m]", R"foo(Like `log("Hello {:s}", &my_slice)`)foo" },
    { "korken89[m]", R"foo(Where `:s` indicates a slice)foo" },
    { "korken89[m]", R"foo(And generate special code for i)foo" },
    { "korken89[m]", R"foo(But I'd like to not do that if possible)foo" },
    { "dirbaio[m]", R"foo(what about slices in struct fields?)foo" },
    { "dirbaio[m]", R"foo(how'd you do that without a derive?)foo" },
    { "chrysn[m]", R"foo(understandable. (and btw, that'd be great to use, i just implemented a terrible remote log viewer via CoAP, and i'd like to do it right and this sounds like the way to go))foo" },
    { "korken89[m]", R"foo(<dirbaio[m] "how'd you do that without a deri")foo" },
    { "korken89[m]", R"foo(For that one would need a derive)foo" },
    { "korken89[m]", R"foo(The idea of `dwarffmt` is not to replace `defmt`)foo" },
    { "korken89[m]", R"foo(They have different usecases)foo" },
    { "korken89[m]", R"foo(Preferable one would have both)foo" },
    { "korken89[m]", R"foo(If you don't have special derives, fall back to `dwarffmt`)foo" },
    { "chrysn[m]", R"foo(korken89: did you check the last link? maybe that's already good enough if the compiler is smart (it's a crude hack, though -- and works))foo" },
    { "korken89[m]", R"foo(Which allows you to print types you do not own for example)foo" },
    { "dirbaio[m]", R"foo(<korken89[m] "If you don't have special derive")foo" },
    { "korken89[m]", R"foo(The worst thing I know is to print something I first need to vendor the lib)foo" },
    { "korken89[m]", R"foo(Add defmt or whatever)foo" },
    { "korken89[m]", R"foo(Use tha)foo" },
    { "korken89[m]", R"foo(Then it works, remove it all)foo" },
    { "korken89[m]", R"foo(Then it breaks again)foo" },
    { "korken89[m]", R"foo(Vendor again)foo" },
    { "korken89[m]", R"foo(....)foo" },
    { "korken89[m]", R"foo(Or I could just print utilizing DWARF)foo" },
    { "korken89[m]", R"foo(If GDB can print it, why not us?)foo" },
    { "dirbaio[m]", R"foo(ah yea, soooo annoying, did that with smoltcp)foo" },
    { "dirbaio[m]", R"foo(here's Debug2Format and Display2Format btw)foo" },
    { "dirbaio[m]", R"foo(you get the fmt strings bloat but maybe for dev it's OK)foo" },
    { "chrysn[m]", R"foo(next iteration: working general-but-ugly recognition, plus working sane-but-type-specific recognition in https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2563f12a39c023e1c06eaf1e6cdb1e9a)foo" },
    { "korken89[m]", R"foo(Cool)foo" },
    { "dirbaio[m]", R"foo(string ops on type_name 🤯)foo" },
    { "korken89[m]", R"foo(Haha)foo" },
    { "korken89[m]", R"foo(Brb lunch here now :))foo" },
    { "chrysn[m]", R"foo(for the third and final stage i'm trying to pull in the IsSlice trait, now that it works with concrete types)foo" },
    { "dirbaio[m]", R"foo(it's deliciously horrifying 👌)foo" },
    { "korken89[m]", R"foo(I'll see what you come up with!)foo" },
    { "korken89[m]", R"foo(Worst case it do it in the proc-macro and away specialization :))foo" },
    { "korken89[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party Worst case it do it in the proc-macro and await specialization :))foo" },
    { "chrysn[m]", R"foo(mh, i'm afraid, no luck :-()foo" },
    { "chrysn[m]", R"foo(documenting roads that didn't work out: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=9d5c7d28697b4e620c73ddff2eaafff4)foo" },
    { "chrysn[m]", R"foo(all boils down to needing specialization.)foo" },
    { "korken89[m]", R"foo()foo" },
    { "korken89[m]", R"foo()foo" },
    { "korken89[m]", R"foo(Thanks for testing!)foo" },
    { "wucke13[m]", R"foo(Is there any convenient way to create null terminated static string literals in `no_std`?)foo" },
    { "jschievink", R"foo(wucke13: https://docs.rs/cstr/0.2.8/cstr/ works fairly well for this)foo" },
    { "wucke13[m]", R"foo(jschievink: But then I would always have to write ` CString::new("data data data data").unwrap()`, correct?)foo" },
    { "jschievink", R"foo(`cstr!` expands to a `&CStr`)foo" },
    { "jschievink", R"foo(so I don't think you'd have to do tha)foo" },
    { "chrysn[m]", R"foo(and especially, `cstr!` makes sure the null is there from the beginning and can be used from static memory)foo" },
    { "chrysn[m]", R"foo((so `cstr!("foo")` expands to something like `wrapper("foo0")`.))foo" },
    { "wucke13[m]", R"foo(<jschievink "`cstr!` expands to a `&CStr`")foo" },
    { "jschievink", R"foo(looks like no)foo" },
    { "jschievink", R"foo(right, the entire `CStr` / `CString` stuff is libstd-only)foo" },
    { "wucke13[m]", R"foo(Hmmh, that's kind of a bummer. Wouldn't it have made sense to include at least a literal type for this? Something like `b0"Some string which will be null terminated"`?)foo" },
    { "wucke13[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party Hmmh, that's kind of a bummer. Wouldn't it have made sense to include at least a literal type for this? Something like `b0"Some string which will be null terminated"`? But then again one could also type `b"Something something0"`, I see.)foo" },
    { "jschievink", R"foo(do you just want a `&str` that's null-terminated?)foo" },
    { "chrysn[m]", R"foo(are you sure? i'm using a local copy for legacy reasons, but that's no_std)foo" },
    { "jschievink", R"foo(it expands to `::std` paths)foo" },
    { "chrysn[m]", R"foo(hmpf, right, it i copied it out of std to get it no_std :-/)foo" },
    { "chrysn[m]", R"foo(https://docs.rs/cstr_core/0.2.2/cstr_core/)foo" },
    { "chrysn[m]", R"foo(it doesn't have a `cstr!()` macro, though (yet? https://github.com/Amanieu/cstr_core/issues/18))foo" },
    { "chrysn[m]", R"foo(wucke13: the advantage `cstr!("foo")` over `b"foo0" is that there is type-level information on the presence of the trailing zero, so a function that passes it on to C can use it safely without an extra check for whether there's a 0 before the end of the [u8].)foo" },
    { "thalesfragoso[m]", R"foo(how can I create an array with a const generic size if the element doesn't implement copy ? it seems like `Default::default()` doesn't work)foo" },
    { "dirbaio[m]", R"foo(Stick the element in a cons)foo" },
    { "thalesfragoso[m]", R"foo(and if I can't make the new const ?)foo" },
    { "dirbaio[m]", R"foo(Then you can't i think...)foo" },
    { "dirbaio[m]", R"foo(You can initialize item by item with MaybeUninit lol)foo" },
    { "thalesfragoso[m]", R"foo(Damn, that is just to not use a constant size of 3 for the alarm state, since some timers will only have 1)foo" },
    { "thalesfragoso[m]", R"foo(I'm inclined to just always create 3)foo" },
    { "thalesfragoso[m]", R"foo(and return None in the get_alarm methods)foo" },
    { "dirbaio[m]", R"foo(Why can't alarm new be const?)foo" },
    { "thalesfragoso[m]", R"foo(function pointers)foo" },
    { "thalesfragoso[m]", R"foo(hmm, maybe there is a nightly feature for tha)foo" },
    { "dirbaio[m]", R"foo(even if none?)foo" },
    { "thalesfragoso[m]", R"foo(yep, but I found the feature)foo" },
    { "dirbaio[m]", R"foo(huh)foo" },
    { "thalesfragoso[m]", R"foo(const_fn_fn_ptr_basics)foo" },
    { "dirbaio[m]", R"foo(alternatively transmute to/from usize lolol)foo" },
    { "thalesfragoso[m]", R"foo(do you think it's worth it ? the users will need to specify the number of alarms in the type)foo" },
    { "dirbaio[m]", R"foo(probably not haha, was half-joking)foo" },
    { "dirbaio[m]", R"foo(just use moar nightly features)foo" },
    { "thalesfragoso[m]", R"foo(I mean even with the feature)foo" },
    { "dirbaio[m]", R"foo(ah, hmm)foo" },
    { "thalesfragoso[m]", R"foo(he users will have to place a 3 or a 1 in the type depending on the timer)foo" },
    { "dirbaio[m]", R"foo(can't it be an associated const of the Instance trait? so it picks the right one)foo" },
    { "dirbaio[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party can't it be an associated const of the Instance trait? so it picks the right one automatically)foo" },
    { "thalesfragoso[m]", R"foo(first I tried with the associate constant, but it can't be placed as an array size)foo" },
    { "thalesfragoso[m]", R"foo(array sizes get resolved before that, so it doesn't recognize i)foo" },
    { "dirbaio[m]", R"foo(wo)foo" },
    { "thalesfragoso[m]", R"foo(hat's why you need const generics....)foo" },
    { "thalesfragoso[m]", R"foo(otherwise generic_array would be completely differen)foo" },
    { "dirbaio[m]", R"foo(hm but it's an associated cons)foo" },
    { "dirbaio[m]", R"foo()foo" },
    { "dirbaio[m]", R"foo(hmmmmmm)foo" },
    { "dirbaio[m]", R"foo(you can with MOAR nightly magic)foo" },
    { "dirbaio[m]", R"foo(https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=08988638d650b38f9b4eea2bdd8d06ee)foo" },
    { "dirbaio[m]", R"foo(but maybe that's too much?)foo" },
    { "thalesfragoso[m]", R"foo(maybe ? two more nightly features for that, should we ?)foo" },
    { "dirbaio[m]", R"foo(yeah but these are the "warning this is unfinished and may crash the compiler or eat your cat" ones)foo" },
    { "thalesfragoso[m]", R"foo(oh, yeah, I didn't know those ones also have the warning)foo" },
    { "thalesfragoso[m]", R"foo(ok, it's decided, it's gonna be 3 for everyone)foo" },
    { "dirbaio[m]", R"foo(maybe do .take_alarm(n) and panic at runtime if `n)foo" },
    { "thalesfragoso[m]", R"foo(I already return an Option)foo" },
    { "thalesfragoso[m]", R"foo(and do tha)foo" },
    { "dirbaio[m]", R"foo(it's somewhat better than giving an alarm that doesn't work at all to the user)foo" },
    { "dirbaio[m]", R"foo(ah okay, so the array will always have 3, but if the timer has only 1 then take of alarms 2,3 will always return none?)foo" },
    { "thalesfragoso[m]", R"foo(yep)foo" },
    { "dirbaio[m]", R"foo(nais)foo" },
    { "dirbaio[m]", R"foo(just a tiny bit of wasted ram, can optimize later)foo" },
    { "dirbaio[m]", R"foo(👍️)foo" },
    { "amber[m]", R"foo(So I theoretically have CMSIS-DAP firmware installed on a WeAct blackpill)foo" },
    { "amber[m]", R"foo(But cargo flash says no probes detected ;()foo" },
    { "amber[m]", R"foo(one sec)foo" },
    { "amber[m]", R"foo(yeah)foo" },
    { "agg", R"foo(what operating system?)foo" },
    { "agg", R"foo(his is often just a driver issue)foo" },
    { "amber[m]", R"foo(linux)foo" },
    { "agg", R"foo(or permissions issue on linux)foo" },
    { "amber[m]", R"foo(hats what I considered)foo" },
    { "agg", R"foo(if you run `dmesg` does it say anything about the cmsis-dap at the end?)foo" },
    { "amber[m]", R"foo(I will check)foo" },
    { "amber[m]", R"foo(it does)foo" },
    { "agg", R"foo(create /etc/udev/rules.d/99-cmsis-dap.rules)foo" },
    { "agg", R"foo(write ATTRS{product}=="*CMSIS-DAP*", MODE="660", GROUP="plugdev", TAG+="uaccess")foo" },
    { "agg", R"foo(sudo udevadm control --reload)foo" },
    { "amber[m]", R"foo(okay thats progress)foo" },
    { "agg", R"foo(hat's a harder one to guess)foo" },
    { "agg", R"foo(could be a lot of things. likely candidates include: bad/wrong connection between probe and target, target not powered, target debug port disabled (maybe it's in sleep or firmware remapped the io pins or...))foo" },
    { "agg", R"foo(you should have gnd, swdio, and swclk connected between probe and target, and both probe and target should be powered)foo" },
    { "amber[m]", R"foo(I have it working know)foo" },
    { "amber[m]", R"foo(CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party I have it working now)foo" },
    { "amber[m]", R"foo(he weact stuff lead me astray)foo" },
    { "amber[m]", R"foo(Thank you for the help :D)foo" },
    { "agg", R"foo(nice!)foo" },
    { "agg", R"foo(no problem)foo" },
    { "yatekii[m]", R"foo(<amber[m] "I have it working know")foo" },
    { "amber[m]", R"foo(power stuff)foo" },
    { "amber[m]", R"foo(but I think its actually not working)foo" },
    { "amber[m]", R"foo(but only pretending to lmao)foo" },
    { "yatekii[m]", R"foo(haha)foo" },
    { "yatekii[m]", R"foo(how do you figure?)foo" },
    { "amber[m]", R"foo(well)foo" },
    { "amber[m]", R"foo(I just have a feeling I guess)foo" },
    { "amber[m]", R"foo(Right now is my break from programming so who knwos)foo" },
    { "yatekii[m]", R"foo(:D)foo" },
    { "gitlabhater", R"foo(That is this message meaning: 「422)foo" },
    { "gitlabhater", R"foo(The change you requested was rejected.)foo" },
    { "gitlabhater", R"foo(Make sure you have access to the thing you tried to change.)foo" },
    { "gitlabhater", R"foo(Please contact your GitLab administrator if you think this is a mistake.」)foo" },
    { "gitlabhater", R"foo(I don't understand... I just try to login with root account.)foo" },
    { "gitlabhater", R"foo(【The change you requested was rejected.】← It mean Change Password web page ??  I (root) have no right to access this page !??)foo" },
    { "gitlabhater", R"foo(WHY This Stupid App have So Many Bugsssssss... ?  Lots bugs had meet long time ago.)foo" },
    { "adhoc", R"foo(it is big and complex?)foo" },
    { "binux", R"foo(Is there a tool or way to migrate a gitlab project including PRs and feature branches to github?)foo" },
    { "DJ-ArcAngel", R"foo(doesn't github have same import features as gitlab, because then it's build in)foo" },
    { "binux", R"foo(DJ-ArcAngel: I couldnt find one)foo" },
    { "luc4", R"foo(Hello! For unknown reasons, I found out that my GitLab db is corrupted in its schema. What could be a good way to import all data into a fresh db? Import/export of each project? Or is there a better (quicker) alternative?)foo" },
    { "Underknowledge", R"foo(@luc4 that depends on what you did to it. easyes always, restore a working backup)foo" },
    { "Underknowledge", R"foo(you ll find some help here https://docs.gitlab.com/ce/development/database_debugging.html and I remeber a thread in the forum)foo" },
    { "Underknowledge", R"foo(@gitlabhater try to delete your cookies, and just probably a PICNIC issue)foo" },
    { "luc4", R"foo(Underknowledge: unfortunately the db broke in its schema, and I have no way to know when this happened. The result is that migrations sometimes fail. The broken db makes postgresql segfault. I already fixed the schema twice, now I guess it is time to give up. So I’d need to migrate my instance to a fresh db somehow, so that the schema is not broken anymore.)foo" },
    { "luc4", R"foo(Underknowledge: I have backups, but it is very difficult to know when the mess happened, and may have happened months and months ago, without me noticing anything.)foo" },
    { "Underknowledge", R"foo(when you want to nulke the db and start a new one you can do ''' gitlab-rake db:drop db:create'''')foo" },
    { "luc4", R"foo(Underknowledge: ok, but the would clear the content as well right?)foo" },
    { "Underknowledge", R"foo(followed by an gitlab-ctl reconfigure, should clean out the whole thing)foo" },
    { "luc4", R"foo(Underknowledge: and then how could I reimport data?)foo" },
    { "luc4", R"foo(Underknowledge: each project one by one?)foo" },
    { "luc4", R"foo(it’s the best I could find)foo" },
    { "Underknowledge", R"foo(hat should be in database_debugging, I only dropped the DB one time to get a backup back in. so youre there on your own sadly)foo" },
    { "luc4", R"foo(and what is the difference of recreating the db like that and creating a new instance from scratch?)foo" },
    { "Underknowledge", R"foo(well, I had a recent backup I just played back in. so I had then a working instance. When you good to start a new instance then just do that.)foo" },
    { "Unode", R"foo(Hi everyone, I have a .template that contains a needs: - target-One and a build stage that uses extends: .template but also defines a needs: - target-Two. Is there any way to have the build stage include both target-One and target-Two as needs: instead of overwriting the template? Currently the build ends up with needs: target-Two)foo" },
    { "Unode", R"foo(also, is there any service that can be used to see the final rendered gitlab-ci.yml file after all templating is logic is interpreted?)foo" },
    { "luc4", R"foo(Hello! Anyone who knows if a backup/restore procedure re-uses the database schema of the backup or if only database data are added to the new database?)foo" },
    { "ToM`", R"foo(I suppose you could check for any « CREATE TABLE » statements)foo" },
    { "luc4", R"foo(ToM`: in the backup you mean?)foo" },
    { "ToM`", R"foo(Unode: open .gitlab-ci.yml from the web UI ; there is a tab « View merged YAML » - a quite young feature, one or two releases old I think)foo" },
    { "ToM`", R"foo(luc4: yep)foo" },
    { "luc4", R"foo(ToM`: from what I see here https://copdips.com/2018/09/backup-and-restore-gitlab-in-docker.html#tar-version it seems the restore recreates the tables.)foo" },
    { "luc4", R"foo(ToM`: which is a problem for me... as the schema in the backup is broken...)foo" },
    { "ToM`", R"foo(I feel you... This is why I always keep several backups, and not the last one ^^ Been bit by i)foo" },
    { "luc4", R"foo(ToM`: I have many... the problem is that the database was probably broken many months ago :-()foo" },
    { "luc4", R"foo(ToM`: I didn't notice cause everything works properly until a migration occurs.)foo" },
    { "Unode", R"foo(ToM`: Thanks, found i)foo" },
    { "Unode", R"foo(Was already using the Web IDE but that feature was elsewhere. Cheers)foo" },
    { "Unode", R"foo(As for the extends I found a ticket in the meantime with discussion going back a few years on how this isn't possible so I'm exploring other options.)foo" },
    { "Unode", R"foo(hanks again everyone)foo" },
    { "luc4", R"foo(Anyone who knows if it is possible to use pg_dump on the internal gitlab database?)foo" },
    { "Human_G33k", R"foo(luc4, you can but it not the best wby)foo" },
    { "Human_G33k", R"foo(you should use the gitlab rake command to backup)foo" },
    { "luc4", R"foo(Human_G33k: I'd need to use --data-only, can I do it with gitlab rake?)foo" },
    { "Human_G33k", R"foo(and you will need other things)foo" },
    { "Human_G33k", R"foo(like repositories dir, assets and configuration files with secrets.)foo" },
    { "luc4", R"foo(Human_G33k: I do not want to backup and restore. I only need to recreate the db schema.)foo" },
    { "Human_G33k", R"foo(honestly never try, but a pg_dump work)foo" },
    { "Human_G33k", R"foo(so do not use --data-only)foo" },
    { "luc4", R"foo(Human_G33k: I do not want the old schema, which is broken.)foo" },
    { "Human_G33k", R"foo(but more schema-only like)foo" },
    { "Human_G33k", R"foo(you can reply migration)foo" },
    { "luc4", R"foo(Human_G33k: my current schema is broken, I only want to dump data.)foo" },
    { "Human_G33k", R"foo(*replay)foo" },
    { "luc4", R"foo(which migration?)foo" },
    { "Human_G33k", R"foo(database migration scrip)foo" },
    { "luc4", R"foo(I do not know when the schema broke.)foo" },
    { "Human_G33k", R"foo(but it depend on how your database is broke)foo" },
    { "luc4", R"foo(Human_G33k: it is badly corrupted.)foo" },
    { "luc4", R"foo(Human_G33k: by corrupted I mean that it is incoherent internally. I'd need a way to recreate the schema, and then reimporting only data.)foo" },
    { "Human_G33k", R"foo(i have the "same issue" on my own debian gitlab instance. WOrkinq on fix it.)foo" },
    { "Human_G33k", R"foo(so dump data only and try to insert on the new schema)foo" },
    { "luc4", R"foo(Human_G33k: :-()foo" },
    { "luc4", R"foo(Human_G33k: exactly)foo" },
    { "luc4", R"foo(hat is the solution, but I'm stuck dumping data-only.)foo" },
    { "Human_G33k", R"foo(from roo)foo" },
    { "Human_G33k", R"foo(su postgres)foo" },
    { "Human_G33k", R"foo(or no)foo" },
    { "Human_G33k", R"foo(you only have to know the database name)foo" },
    { "Human_G33k", R"foo(gitlab_production)foo" },
    { "luc4", R"foo(gitlabhq_production should be)foo" },
    { "Human_G33k", R"foo(from debian package)foo" },
    { "luc4", R"foo(I'm in docker, postgres does not exis)foo" },
    { "Human_G33k", R"foo(i hate sooo mutch docker)foo" },
    { "Human_G33k", R"foo(it s a dev tool not a production one …)foo" },
    { "luc4", R"foo(Human_G33k: pg_dump -h /var/opt/gitlab/postgresql/ -U gitlab-psql --column-inserts --data-only gitlabhq_production)foo" },
    { "luc4", R"foo(Human_G33k: this may be near)foo" },
    { "luc4", R"foo(Human_G33k: failed: FATAL: Peer authentication failed for user)foo" },
    { "Human_G33k", R"foo(easy)foo" },
    { "luc4", R"foo(Human_G33k: maybe I'm missing some password...)foo" },
    { "Human_G33k", R"foo(you need to change conf in postgres conf)foo" },
    { "Human_G33k", R"foo(something in pg_hda.conf if i remember well)foo" },
    { "luc4", R"foo(oh, that I didn't know)foo" },
    { "luc4", R"foo(Human_G33k: what should I change in there?)foo" },
    { "Human_G33k", R"foo(probably your ip or something is not se)foo" },
    { "Human_G33k", R"foo(and if there is a need for password it it can be the root cause too i guessx)foo" },
    { "Human_G33k", R"foo(not sure there is a password by defaul)foo" },
    { "Human_G33k", R"foo(more a unix socke)foo" },
    { "Human_G33k", R"foo(let me check)foo" },
    { "luc4", R"foo(unix socket is in /var/opt/gitlab/postgresql)foo" },
    { "luc4", R"foo(I'm not sure about the password)foo" },
    { "luc4", R"foo(couldn't find if there is a default one)foo" },
    { "Human_G33k", R"foo(for me conf is /etc/postgresql/13/main/pg_hba.conf you need to adapt it the conf dir and the version number.)foo" },
    { "Human_G33k", R"foo(a line containing local all all peer)foo" },
    { "luc4", R"foo(mmh... nothing in there)foo" },
    { "Human_G33k", R"foo(can be change to)foo" },
    { "Human_G33k", R"foo(local all all trus)foo" },
    { "Human_G33k", R"foo(ry)foo" },
    { "luc4", R"foo(find did not find any file with that name)foo" },
    { "Human_G33k", R"foo(in /var/opt/gitlab/postgresql)foo" },
    { "Human_G33k", R"foo(its a conf so pretty sure it can be a more generic one (debian make things well))foo" },
    { "luc4", R"foo(oh, hba!)foo" },
    { "luc4", R"foo(found i)foo" },
    { "Human_G33k", R"foo(ry the change restart posgresql)foo" },
    { "Human_G33k", R"foo(and retry the dump)foo" },
    { "Human_G33k", R"foo(also check gitlab-rack sub command)foo" },
    { "luc4", R"foo(Human_G33k: I'm trying, thanks!)foo" },
    { "Human_G33k", R"foo(here is lot of stuff)foo" },
    { "Human_G33k", R"foo(for check "repair" existing gitlab instance)foo" },
    { "luc4", R"foo(unfortunately nothing changed)foo" },
    { "Human_G33k", R"foo(check gitlab conf file the database password should be somewhere)foo" },
    { "luc4", R"foo(Human_G33k: eh... cannot find where unfortunately)foo" },
    { "luc4", R"foo(Human_G33k: it seems it was sufficient to log in with the gitlab-psql user)foo" },
    { "luc4", R"foo(Human_G33k: in case this can be of help to you)foo" },
    { "devslash", R"foo(has anyone here taken the gitlab certified associate course offered by gitlab)foo" },
    { "RandomArcher", R"foo(Hello everyone, I'm getting a "Access denied" (cloudflare error) when visiting 'gitlab.com' any idea why it's happening?)foo" },
    { "devslash", R"foo(when you use a quick action like /spend isnt it supposed to add a label on the issue with the spend time)foo" },
    { "N3X15", R"foo(Is there a way to delete a user and their contributions through the API? Some prick is spamming my instance and has whitespace in their name, so I can't confirm the delete via typing in their name)foo" },
    { "certifiable", R"foo(N3X15: https://docs.gitlab.com/ee/api/users.html#user-deletion)foo" },
    { "certifiable", R"foo(With hard_delete=)foo" },
    { "N3X15", R"foo(409)foo" },
    { "N3X15", R"foo(gitlab.exceptions.GitlabHttpError: 409: User cannot be removed while is the sole-owner of a group)foo" },
    { "N3X15", R"foo(Time to make a security email, I guess)foo" },
    { "N3X15", R"foo(Ended up being a problem with the Python library I'm using.)foo" },
    { "N3X15", R"foo(Apparently they didn't think of passing params to DELETEs)foo" },
    { "IOhannes", R"foo(what about the 13.8.2 release?)foo" },
    { "IOhannes", R"foo(i so hate it when packages appear in the apt-repositories and there is no changelog/announcemen)foo" },
    { "dreamer", R"foo(IOhannes: changelog is overrated. you'll find out the new bugs soon enough!)foo" },
    { "whf", R"foo(Does anyone here know if there is (or are plans to create) a general,global gitlab events hook..? So externally a pub<-)foo" },
    { "ikke", R"foo(whf: gitlab already supports system hooks)foo" },
    { "whf", R"foo(from what i've read, the system hooks are only on "git"-events: pre-receive, post-receive, update.)foo" },
    { "whf", R"foo(https://docs.gitlab.com/ee/administration/server_hooks.html)foo" },
    { "bernard__", R"foo(never understood git events)foo" },
    { "queip", R"foo(bernard__: it's a script that runs when ever something happens, like a commit happens)foo" },
    { "queip", R"foo(it can afair also decide to outout some message, or to stop given operation from proceeding)foo" },
    { "bernard__", R"foo(queip: yeah that part is understandable)foo" },
    { "bernard__", R"foo(in regards to CI though.. git-ftp doesn't trigger hooks right?)foo" },
    { "bernard__", R"foo(hey trigger by using git pull git commit etcetera)foo" },
    { "bernard__", R"foo(right?)foo" },
    { "whf", R"foo(There are several, bernard__ more info is on https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks .. gitlab uses the three server-side hook that are listed at the end of that page.)foo" },
    { "TomyWork", R"foo(I'm trying to remove a kubernetes cluster from a group that i just added there and didn't use for anything. I now clicked on "Remove integration and resources" 2 times now and all that happens is it showing "Kubernetes cluster integration and resources are being removed." at the top. been waiting for 10 minutes now, which is a little excessive for removing nothing :))foo" },
    { "TomyWork", R"foo(can i see the progress or logs or something somewhere?)foo" },
    { "bernard__", R"foo(whf: danke)foo" },
    { "TomyWork", R"foo(ok i found something in the sidekiq dashboard... gcp_cluster:clusters_cleanup_service_account queue has a Clusters::Cleanup::ServiceAccountWorker job that keeps running into a 403)foo" },
    { "TomyWork", R"foo(I'm not sure what it's trying to do)foo" },
    { "TomyWork", R"foo(according to "kubectl get --all-namespaces serviceaccounts", there's no service account created after the "gitlab" service account that I created about 1.5 hours ago)foo" },
    { "TomyWork", R"foo(hat's the one i gave to gitlab to use. is it trying to delete that?)foo" },
    { "bernard__", R"foo(hm access logs?)foo" },
    { "TomyWork", R"foo(i think it's trying to use the company proxy -_-)foo" },
    { "TomyWork", R"foo(and that gives me a 403 cause that doesnt have access to internal services for obvious reasons)foo" },
    { "TomyWork", R"foo(and it's completely ignoring no_proxy and NO_PROXY)foo" },
    { "TomyWork", R"foo(even if i put the fqdn in there, even if i add the por)foo" },
    { "TomyWork", R"foo(and yes, i reconfigured and restarted everything)foo" },
    { "TomyWork", R"foo(i even checked using procfs if the sidekiq process got the environment variables)foo" },
    { "TomyWork", R"foo(net::http, or whatever it uses to wrap that, is broken)foo" },
    { "zumba_addict", R"foo(Need help, we can't search a string with spaces. How do we do that?)foo" },
    { "zumba_addict", R"foo(wrapping it with double quotes didn't help)foo" },
    { "bernard__", R"foo(%20)foo" },
    { "bernard__", R"foo(jk)foo" },
    { "zumba_addict", R"foo(lol)foo" },
    { "zumba_addict", R"foo(so not possible?)foo" },
    { "bernard__", R"foo(never found gitlabs search function useful)foo" },
    { "zumba_addict", R"foo(from their wiki page -)foo" },
    { "zumba_addict", R"foo(i just found out many at work hates the search functionality)foo" },
    { "bernard__", R"foo(same)foo" },
    { "D0han", R"foo(use grep)foo" },
    { "D0han", R"foo(¯_(ツ)_/¯)foo" },
    { "bernard__", R"foo(yeah clone all projects and run grep)foo" },
    { "bernard__", R"foo(shouldn't take long)foo" },
    { "zumba_addict", R"foo(sed may be faster)foo" },
    { "zumba_addict", R"foo(but grep is righ)foo" },
    { "zumba_addict", R"foo(ah, it doesn't like CMakeLists.txt LICENSE README.md build cmake raw raw-all scripts src third-party wildcard even if they mentioned it in their wiki, LMAO)foo" },
    { "wooosaiiii", R"foo(Lets say I have Jenkinsfile in my git repo. Will jenkins start the build if there are no new changes in my git repo? Can we somehow override this so that the build is triggered anyway?)foo" },
    { "nkuttler", R"foo(wooosaiiii: what kind of project do you have?)foo" },
    { "nkuttler", R"foo(fwiw, check build triggers in the config)foo" },
    { "halkeye[m]", R"foo(wooosaiiii: You can always build it manually, but it won't randomly start building on its own unless manually built, or a push (assuming scm is attached to the build). You can use ^^ such as the cron trigger to trigger it however often you want.)foo" },
    { "rewilliams", R"foo(Hello, I am trying to get this Jenkinsfile to work but keep getting the following failure. "java.lang.IllegalStateException: withCredentials step must be called with a body")foo" },
    { "tang^", R"foo(yup)foo" },
    { "tang^", R"foo(withCredentials() { steps_using_your_creds })foo" },
    { "rewilliams", R"foo(This is what I have)foo" },
    { "rewilliams", R"foo(https://gist.github.com/rewilliams1/28a674fc74759b728e737fdd2c6b4f83)foo" },
    { "rewilliams", R"foo(It seems to be correc)foo" },
    { "tang^", R"foo(no, it isn't correc)foo" },
    { "halkeye[m]", R"foo(as tang^ said, its a block not a statement, you need to wrap the statements you want credentials to be available for, in a block withCredentials() { stuff here })foo" },
    { "tang^", R"foo(if you're trying to use API token in the ansiblePlaybook call, you need {} around that step)foo" },
    { "halkeye[m]", R"foo(also that looks like a segment of declarative, which doesn't support withCredentails like that. You either need script { withCredentials { foo } }, or to use credentials in your environment block)foo" },
    { "tang^", R"foo(oh, I missed that par)foo" },
    { "rewilliams", R"foo(It is a declarative pipeline)foo" },
    { "halkeye[m]", R"foo(https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials)foo" },
    { "tang^", R"foo(okay, let me suggest an alternative then)foo" },
    { "tang^", R"foo(https://gist.github.com/kenrachynski/2b996675dd6c2d2335481df2bb05059a)foo" },
    { "rewilliams", R"foo(oh thats what halkeye[m] mean)foo" },
    { "tang^", R"foo(and the next revision uses the full declarative setup)foo" },
    { "tang^", R"foo(oh, cool, it shows your revisions too)foo" },
    { "rewilliams", R"foo(so does the script addition add a segment of scripted pipeline to declarative?)foo" },
    { "tang^", R"foo(yes)foo" },
    { "tang^", R"foo(if you look at version 4 of my gist, you can see how to do it without the script{} block)foo" },
    { "rewilliams", R"foo(cool, I didnt realize that this was the same as calling withCredentials credentials( 'AutoCreateAutoUpdateJobsToken' ))foo" },
    { "tang^", R"foo(yeah, halkeye[m]'s link shows the declarative path for using credentials)foo" },
    { "tang^", R"foo(he credential does need to be supported so there may be some types that still require steps{ withCredentials() {} })foo" },
    { "halkeye[m]", R"foo(most of the common ones are fine though)foo" },
    { "tang^", R"foo(yeah)foo" },
    { "tang^", R"foo(I don't think I've run into any that didn't work in the environment{} block)foo" },
    { "rewilliams", R"foo(Cool, thanks for showing both methods.)foo" },
    { "tang^", R"foo(no problem)foo" },
    { "tang^", R"foo(I find that helps me remember the differences)foo" },
    { "rewilliams", R"foo(I'm still a bit confused to why mine didnt work. When using withCredentials with "sh" it works like that just fine)foo" },
    { "rewilliams", R"foo(If you all don't mine given some insight around tha)foo" },
    { "tang^", R"foo(possibly you need to pass the credentials to the ansiblePlaybook task)foo" },
    { "tang^", R"foo(hey do get added to the env, but since you're using a plugin, it might not be looking in env)foo" },
    { "hichhiker", R"foo(from what I recall, at least in scripted - `withCredentials()` adds Groovy variables into the binding of it's closure, but does not create env variables by defaul)foo" },
    { "hichhiker", R"foo(hat may be a source of some confusion)foo" },
    { "tang^", R"foo(https://gist.github.com/kenrachynski/b2a953c3a7b01b13575ed133ef186c3b)foo" },
    { "tang^", R"foo(mind you, I use environment{} with my ansiblePlaybook calls successfully)foo" },
    { "tang^", R"foo(yeah but we want to keep it within declarative)foo" },
    { "tang^", R"foo((yes, I clicked on your link))foo" },
    { "hichhiker", R"foo(Yeah, this is pure scripted)foo" },
    { "rewilliams", R"foo(Okay so it looks like I can use both)foo" },
    { "tang^", R"foo(Jenkins is nothing if not flexible)foo" },
    { "rewilliams", R"foo(Very flexible but also difficult to get a hold of everything)foo" },
    { "tang^", R"foo(yeah)foo" },
    { "hichhiker", R"foo(sometimes there are too many options :-D)foo" },
    { "AlanMD", R"foo(Greetings. Any idea how to get past this problem https://issues.jenkins.io/browse/JENKINS-46468 ?)foo" },
    { "jenkins-admin", R"foo(JENKINS-46468:"no such computer" error occurs during SCM Pulling (Open) https://issues.jenkins.io/browse/JENKINS-46468)foo" },
    { "rewilliams", R"foo(Thanks all, so my initial problem was because the ansible plugin does not see variables in the environment? Just trying to report back to team with correct logic.)foo" },
    { "tang^", R"foo(rewilliams: not necessarily... I shared another gist of mine that I use in production right now... it uses environment variables, but isn't using the same one you're using)foo" },
    { "rewilliams", R"foo(The one you shared uses environment instead of script. I was going to use the script option and wanted to verify the logic behind that one)foo" },
    { "tang^", R"foo(I know that one works with environment because the SSH key is provided to ansiblePlaybook via environment and connects to my servers properly)foo" },
    { "rewilliams", R"foo(is your SSHKEY being used for your step credentialsId?)foo" },
    { "tang^", R"foo(yes)foo" },
    { "tang^", R"foo(agent{ label 'aws' } is an ephemeral EC2 agent... doesn't have the key before it starts up)foo" },
    { "rewilliams", R"foo(oh so it just makes it available)foo" },
    { "rewilliams", R"foo(credentialsId: 'jenkins-ansible-key')foo" },
    { "rewilliams", R"foo(Where is this variable coming from)foo" },
    { "tang^", R"foo(credentials as well)foo" },
    { "tang^", R"foo(hmm, wonder if that's overriding the environment one)foo" },
    { "tang^", R"foo(hat would be "fun")foo" },
    { "rewilliams", R"foo(lol)foo" },
    { "tang^", R"foo(let me check my credentials store for both of those)foo" },
    { "rewilliams", R"foo(so you don't have set it explicitly? I assumed that there needed to be an environment for that also)foo" },
    { "tang^", R"foo(okay, jenkins-ansible-key is a SSH Username with Private Key)foo" },
    { "tang^", R"foo(jenkins-ansible is a secret file)foo" },
    { "tang^", R"foo(which, I assume is just the private key)foo" },
    { "tang^", R"foo(dang it, now I have to review that job to see exactly how it's working)foo" },
    { "tang^", R"foo(he plugin's github project says it should be able to use any environment variables you configure)foo" },
    { "tang^", R"foo(so root cause for your issue was in not using the withCredentials block properly. you can either use withCredentials or environment blocks to get your data to the plugin)foo" },
    { "annette", R"foo(I have an issue with the jenkins ajent.jar 4.3 when configure behind a proxy server.  I am getting can't connect to jenkins server on 49187 and i Ma not seeing any traffic coming from my server. I am concerned that I have either not configured the startup correctly for the connection string or that tis release of the jar not longer supports)foo" },
    { "annette", R"foo(proxy.. It is important to note that this came config works correctly with agent.jar release 3.17  Any help would be much appreciated.)foo" },
    { "annette", R"foo(I am not seeing traffic...)foo" },
    { "koopajah", R"foo(blueco : rounding with tax is quite complex. We have a detailed section in the doc about this: https://stripe.com/docs/billing/taxes/tax-rates#rounding)foo" },
    { "koopajah", R"foo(blueco : do you have a concrete example I can look at?)foo" },
    { "koopajah", R"foo(I just tried locally in the Dashboard. Subscription to a Price for $14.98, quantity 2 and tax rate 9.5 and my invoice is for $32.81 which matches what you expected)foo" },
    { "koopajah", R"foo(here is fine if it's just an id, but you can DM me otherwise)foo" },
    { "koopajah", R"foo(blueco okay so you have 2 separate prices, not one price with quantity 2)foo" },
    { "koopajah", R"foo(and so it can lead to rounding discrepancies because of the way we "spread" the tax across items")foo" },
    { "koopajah", R"foo(yeah)foo" },
    { "InternetJones", R"foo(Martin: Yep, you'd look at the Balance Transaction object: https://stripe.com/docs/api/balance_transactions/object#balance_transaction_object-fee)foo" },
    { "InternetJones", R"foo(Guest52978: It does. If you're using destination charges then the Balance Transaction would be on the platform)foo" },
    { "koopajah", R"foo(Guest52978 : you get the Stripe fee on the BalanceTransaction for the total amount you charged, and then you can make the rest of the math)foo" },
    { "koopajah", R"foo(dannyb : we don't delete accounts unless you do it yourself)foo" },
    { "koopajah", R"foo(yeah I haven't seen us delete accounts)foo" },
    { "koopajah", R"foo(hmmm too old, it was deleted in 2019 so I don't see logs for i)foo" },
    { "InternetJones", R"foo(paulbryan: Yup, you'd use the official React Native bindings: https://github.com/stripe/stripe-react-native)foo" },
    { "InternetJones", R"foo(paulbryan: Yup, have a look here: https://stripe.com/docs/payments/save-and-reuse?platform=react-native)foo" },
    { "InternetJones", R"foo(paulbryan: What you'd do is create the SetupIntent on the server and provide both the PaymentMethod ID and `confirm: true`: https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm)foo" },
    { "InternetJones", R"foo(Then if the status transitions to `requires_action` you'd use `handleCardAction` on the client to do the 3DS flow: https://stripe.dev/stripe-react-native/api-reference/modules.html#handlecardaction)foo" },
    { "InternetJones", R"foo(paulbryan: It's either part of the `useStripe` hook or you can import it directly from stripe-react-native)foo" },
    { "InternetJones", R"foo(Here it is as part of the root package: https://github.com/stripe/stripe-react-native/blob/master/src/functions.ts#L222)foo" },
    { "InternetJones", R"foo(And here it is as part of the `useStripe` hook: https://github.com/stripe/stripe-react-native/blob/master/src/hooks/useStripe.tsx#L191)foo" },
    { "timebox", R"foo(Guest17429: Hi! I don't think we have any templates.)foo" },
    { "timebox", R"foo(Guest17429: I think the schema is listed within Sigma in the Dashboard because I think it's slightly specific to your API version/etc.)foo" },
    { "timebox", R"foo(Guest17429: https://stripe.com/docs/sigma/writing-queries#schema)foo" },
    { "InternetJones", R"foo(Sandee: That's expected, if the initial payment fails the subscription will be in an `incomplete` state)foo" },
    { "InternetJones", R"foo(paulbryan: Sorry you'd still use `confirmSetupIntent`)foo" },
    { "InternetJones", R"foo(paulbryan: It's available either as part of the `useStripe` hook: https://github.com/stripe/stripe-react-native/blob/master/src/hooks/useStripe.tsx#L195 or a direct import from `stripe-react-native`: https://github.com/stripe/stripe-react-native/blob/master/src/functions.ts#L244)foo" },
    { "InternetJones", R"foo(paulbryan: You can also use the `useConfirmSetupIntent` hook, it links to the same thing as the two above)foo" },
    { "InternetJones", R"foo(Hi gezoonthide-the-, what's up?)foo" },
    { "InternetJones", R"foo(gezoonthide-the-: What sort of fail-safe?)foo" },
    { "InternetJones", R"foo(Not sure what you mean, if you can't reach Stripe's servers... then nothing happens)foo" },
    { "InternetJones", R"foo(Well if Stripe's server doesn't get reached then how could it?)foo" },
    { "InternetJones", R"foo(If you're using one of the SDKs, then it'll throw an error yes)foo" },
    { "InternetJones", R"foo(If you're using one of the client libraries, you might want to look into using automatic retries. Here's how you do it in node for instance: https://github.com/stripe/stripe-node#network-retries)foo" },
    { "InternetJones", R"foo(Have a look here: https://github.com/stripe/stripe-dotnet#automatic-retries)foo" },
    { "timebox", R"foo(Rinkal: Hi! Do you have the customer on your website at the time?)foo" },
    { "timebox", R"foo(Rinkal: Then you'd use Stripe.js to handle that: https://stripe.com/docs/js/payment_intents/confirm_card_paymen)foo" },
    { "timebox", R"foo(Irek: Hi! You could use the upcoming invoice endpoint: https://stripe.com/docs/api/invoices/upcoming)foo" },
    { "timebox", R"foo(Rinkal: Stripe.js wil redirect them to their bank and their bank will do whatever process their bank does for verification.)foo" },
    { "timebox", R"foo(Rinkal: Yup: https://stripe.dev/stripe-react-native/api-reference/modules.html#useconfirmpaymen)foo" },
    { "timebox", R"foo(Irek: You'd have to calculate it yourself if you don't have a Customer ID I think.)foo" },
    { "timebox", R"foo(Irek: Yes.)foo" },
    { "timebox", R"foo(Rinkal: You can still do that and some charges may then just work, but others will need to be sent client-side for confirmation via React Native.)foo" },
    { "InternetJones", R"foo(fabio78: Bacs direct debit is only supported via Checkout and not Stripe.js)foo" },
    { "InternetJones", R"foo(fabio78: Bacs really is only supported on Checkout though, unless you're in the private beta to allow it to be used with Stripe.js? https://stripe.com/docs/payments/bacs-debit/accept-a-paymen)foo" },
    { "InternetJones", R"foo(MK092: That's a question that you'll need to reach out to support for: https://support.stripe.com/contac)foo" },
    { "InternetJones", R"foo(MK092: I won't be able to help you here, as a first step I'd ask Chargebee if their systems allow for that kind of migration)foo" },
    { "InternetJones", R"foo(MK092: Chargebee sent you to IRC?)foo" },
    { "InternetJones", R"foo(MK092: I'm afraid they were both mistaken, you really need to reach out to Stripe support and ask them)foo" },
    { "InternetJones", R"foo(fabio78: I suggest you reach back out to your contact, that's a private beta and we prefer not to discuss them in public forums like IRC)foo" },
    { "InternetJones", R"foo(Hi Orfe, in general the more information the better. I'd collect the full billing address, which you can find the fields to here: https://stripe.com/docs/api/payment_methods/object#payment_method_object-billing_details-address)foo" },
    { "InternetJones", R"foo(leo90: Sure)foo" },
    { "tr12", R"foo(Orfe: generally, line1 + postal/zip code are the most useful bits to collec)foo" },
    { "tr12", R"foo(annecdotally, some banks ignore the line1 data entirely and just validate the postal code, because address formatting is hard/inconsisten)foo" },
    { "tr12", R"foo(it's not a bad idea to collect the whole shebang, but the postal code is the most importan)foo" },
    { "InternetJones", R"foo(paulbryan: Do you have the SetupIntent ID?)foo" },
    { "InternetJones", R"foo(DiamondsNL: Depends what you mean by payment plan)foo" },
    { "InternetJones", R"foo(DiamondsNL: Wrong place for that I'm afraid, this is a public forum for code and development questions. You should get in touc with sales: https://stripe.com/contact/sales)foo" },
    { "tr12", R"foo(Orfe: np!)foo" },
    { "InternetJones", R"foo(paulbryan: If you share it I can look it up on Stripe's end to see what went wrong)foo" },
    { "InternetJones", R"foo(leo15: Would you be able to open up an issue for that on the Github repo? https://github.com/stripe/stripe-react-native/issues)foo" },
    { "InternetJones", R"foo(leo15: I'm not sure to be hones)foo" },
    { "InternetJones", R"foo(paulbryan: And what does your code look like when confirming the SetupIntent on the client?)foo" },
    { "InternetJones", R"foo(paulbryan: Why did you set `off_session` to `false` in your creation call?)foo" },
    { "InternetJones", R"foo(oops disregard tha)foo" },
    { "InternetJones", R"foo(paulbryan: Can you try passing in the PaymentMethod ID when confirming your SetupIntent? Like here but with `confirmSetupIntent` instead of `confirmPayment`: https://github.com/stripe/stripe-react-native/issues/318#issuecomment-856536565)foo" },
    { "InternetJones", R"foo(partwith: Are you using Checkout?)foo" },
    { "InternetJones", R"foo(partwith: Are you using Checkout Sessions or a custom payment form with Stripe Elements?)foo" },
    { "InternetJones", R"foo(partwith: Did https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-afterpay_clearpay-reference not work?)foo" },
    { "InternetJones", R"foo(partwith: Would you mind writing into support? That's something we'd have to take a closer look at: https://support.stripe.com/contac)foo" },
    { "InternetJones", R"foo(paulbryan: I'm out of ideas I'm afraid, would you be able to open up an issue on https://github.com/stripe/stripe-react-native/issues please?)foo" },
    { "karllekko", R"foo(Daniil: hi there! right now, no, you're limited to what you can configure in https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-subscription_data)foo" },
    { "karllekko", R"foo(depending on the use case using `trial_end` might help(since that effectively delays the billing cycle until that time at least))foo" },
    { "karllekko", R"foo(feed: you might want to look into https://stripe.com/docs/api/idempotent_requests)foo" },
    { "karllekko", R"foo(feed: no, that's not true, it works on any API reques)foo" },
    { "ynnnoj", R"foo(Daniil: Hello there. You mean a prorated price for starting a subscription mid-month?)foo" },
    { "ynnnoj", R"foo(Rushi: Hey! That's an integration you'd need to build and manage yourself. There's no way for Stripe to integrate directly with it, no)foo" },
    { "ynnnoj", R"foo(ChrisRitual: Hello there. What problems are you having exactly? I may be able to help)foo" },
    { "ynnnoj", R"foo(Mark68: Hi! Yes our Elements are implemented via iframes (for PCI compliance reasons). There's no way to use your pre-existing CSS with it, no. You'd need to use the `style` parameter: https://stripe.com/docs/js/elements_object/create_element?type=card#elements_create-options-style)foo" },
    { "ynnnoj", R"foo(ChrisRitual: Yeah the RN SDK is still in its infancy. I would recommend creating an issue on the GH repo or writing into support: http://support.stripe.com/contac)foo" },
    { "ynnnoj", R"foo(ChrisRitual: We can spend some time diving into the issue that way)foo" },
    { "ynnnoj", R"foo(Rushi: Sorry, missed that. Was that a question for me?)foo" },
    { "ynnnoj", R"foo(Rushi: Np!)foo" },
    { "ynnnoj", R"foo(Owen: Hey! Yes, Checkout Session objects exist even after they 'expire'. You just can't use them with `redirectToCheckout`)foo" },
    { "ynnnoj", R"foo(Owen: No problem, glad I could help!)foo" },
    { "karllekko", R"foo(Piercy: there isn't really any way to test it unfortunately. And it gets triggered when a batch job on our side runs occasionally to find saved cards that expire within the next month)foo" },
    { "karllekko", R"foo(I don't see how it could fire more than once for the same customer. I would say though that in general I wouldn't really recommend relying on this event(it only exists for legacy objects, we didn't port it to the PaymentMethods API).)foo" },
    { "ynnnoj", R"foo(Daniil: That's not possible with Checkout unfortunately. The billing period would start from the date the subscription was created and run for the period defined by the price)foo" },
    { "ynnnoj", R"foo(Daniil: Are you tied to Checkout?)foo" },
    { "ynnnoj", R"foo(Daniil: The initial invoice and payment would be for the full amount as stipulated by the `line_items` of the Checkout Session yes. The billing period itself would start from the date of that Checkout Session and run for a full month (assuming monthly recurring))foo" },
    { "ynnnoj", R"foo(Daniil: Yes absolutely! There's more integration work required on your site, but you have greater control. Good starting point: https://stripe.com/docs/billing/subscriptions/elements)foo" },
    { "ynnnoj", R"foo(Daniil: For example you could using scheduling to implement the billing cycle you've been referencing (i.e. bill X amount for remainder of calendar month, and then start new billing cycle on 1st): https://stripe.com/docs/billing/subscriptions/subscription-schedules/use-cases)foo" },
    { "ynnnoj", R"foo(Daniil: Np! Happy to answer any other Qs)foo" },
    { "ynnnoj", R"foo(Daniil: Without Checkout you'll need to build a UI/form to capture payment details and confirm the payment/subscription. Elements is a good tool for this! https://stripe.com/docs/billing/subscriptions/elements#collect-paymen)foo" },
    { "ynnnoj", R"foo(Daniil: The Elements UI will be on your site for your customers to provide their payment details. It's a part of Stripe.js so the actual payment details are tokenised and never actually touch your servers: https://stripe.com/docs/stripe-js#elements)foo" },
    { "karllekko", R"foo(o be clear it depends what you mean by "all card stuff". Like ynnnoj says, even if you use Elements, you never see any raw card details and there's no PCI compliance impact, if that's the concern.)foo" },
    { "karllekko", R"foo(so I'd suggest clarifying with your team what this "restriction" is exactly! (and refer to https://stripe.com/docs/security/guide#validating-pci-compliance, Checkout and Elements are the same ))foo" },
    { "karllekko", R"foo(if you specifically want to use Checkout for the hosted UI then you can, but it doesn't support that use case of setting the billing cycle so then you'd have to re-evaulate.)foo" },
    { "karllekko", R"foo(GodFather85: hi! 3D Secure(what you call OTP) is something that banks require(you can read about it here : https://stripe.com/docs/strong-customer-authentication ). It's not something you as the merchant or Stripe as the payment processor control or can disable.)foo" },
    { "karllekko", R"foo(Daniil: yes, you can use Checkout or Elements, those are the two options.)foo" },
    { "karllekko", R"foo(Daniil: i.e you can redirect to Checkout and have the customer pay there and create the subscription — that's by far the easier solution here. It's just that it creates the subscription at the time the customer pays, you can't set the billing anchor as I mentioned earlier. If you specifically need that feature then you'd have to use Elements instead(have a credit card form on your own page and then create a)foo" },
    { "karllekko", R"foo(subscription in the API). Or look into the `trial_end` possibility with Checkout I mentioned)foo" },
    { "karllekko", R"foo(dbh2125: to be clear, the button renders as a Google Pay button when in Chrome and GPay will be used (https://stripe.com/docs/stripe-js/elements/payment-request-button), so I'm not sure why you'd need tha)foo" },
    { "karllekko", R"foo(dbh2125: yep, but I'm not sure _why_ you would use your own button — people usually do that because they want the button to look like a native Google Pay button, as in the past, it didn't, it was a generic purple button. But as of a couple of months ago, it renders as an actual native GPay button so there's much less need to do this, so I want to make sure you're not creating unnecessary work for yourself.)foo" },
    { "karllekko", R"foo(in any case the assets you want are probably https://developers.google.com/pay/api/web/guides/brand-guidelines#logo-mark-assets . But again I'm not sure why you'd put work into making the button look like those assets when it already looks that way without needing to customise i)foo" },
    { "karllekko", R"foo(GodFather85: yep I already answered above.)foo" },
    { "karllekko", R"foo(GodFather85: "while holding amount (at the time journey begins), we faced required action (for payment confirmation - something like otp) which we don't expect" you should expect that. It's completely normal and possible, when you try to charge a card, the bank can require the customer to authenticate the payment using 3D Secure(OTP). You have to be able to handle it(Stripe's integrations help you with that).)foo" },
    { "karllekko", R"foo("can we get otp at the time user store card in stripe? If yes, we need to know HOW?")foo" },
    { "karllekko", R"foo(hat's what SetupIntents might be useful for : https://stripe.com/docs/payments/save-and-reuse)foo" },
    { "karllekko", R"foo(dbh2125: yep, well the button is created by Google's Javascript library, so probably there is no specific static asset set, I can't find one on their site)foo" },
    { "karllekko", R"foo(so you'd maybe want to do something like just photoshop something up from screenshots etc of the mounted button and use that as the image for your element, I'm not aware of a better option)foo" },
    { "karllekko", R"foo(or you could just download the images from the page on https://developers.google.com/pay/api/web/guides/brand-guidelines#style (just above the part of the page I linked to earlier), they seem high quality)foo" },
    { "karllekko", R"foo(mamamoooo: you have to bring them back on session to finish. I'm confused by your code snippet— that would just charge an _entirely different_ card than the one they're using. Also pm_card_visa only works for test mode.)foo" },
    { "ynnnoj", R"foo(netameta: Hey! We support Google Pay (and other wallets) as a payment method: https://stripe.com/docs/google-pay)foo" },
    { "ynnnoj", R"foo(netameta: No PayPal suppor)foo" },
    { "karllekko", R"foo(Daniil: ah, makes sense. Well then yeah, as I've said, you can certainly use Checkout, but you can't directly support that use case of setting the billing cycle, it's just not possible to combine all those requirements right now.)foo" },
    { "ynnnoj", R"foo(Daniil: That could work, yes. You would add a one time line item with a calculated proration amount (for remainder of month) and then stagger the start of the subscription using `trial_end` parameter: https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-subscription_data-trial_end)foo" },
    { "ynnnoj", R"foo(Daniil: Yep, likely the better option as `trial_end` needs to be 48 hours+)foo" },
    { "ynnnoj", R"foo(Daniil: Aww, that's so nice to hear. I'll pass your kind words on to the rest of the team!)foo" },
    { "ynnnoj", R"foo(netameta: Exactly that. You can enable Google Pay for your customers to use as a payment method and it'll be processed just like any other Stripe transaction)foo" },
    { "ynnnoj", R"foo(Daniil: Glad you've found helpful! Let us know if you'e got any other Qs)foo" },
    { "ynnnoj", R"foo(keithm: Hey! Let me check on that for you)foo" },
    { "ynnnoj", R"foo(hillct: Hello! If you're using Stripe.js/Elements then you're likely want to use `confirmCardPayment` once the subscription is created, passing your payment details from the Elements instance. There's a great guide here: https://stripe.com/docs/billing/subscriptions/elements#collect-paymen)foo" },
    { "ynnnoj", R"foo(hillct: Read over that and let me know if anything isn't clear!)foo" },
    { "ynnnoj", R"foo(keithm: Not a problem! To clarify, most (if not all) APIs are callable from all account types. What may differ is the parameters available, and these are often highlighted in the docs as `CUSTOM CONNECT ONLY` (or similar, see: https://stripe.com/docs/api/account_links/create#create_account_link-type) In the specific case of payouts, the schedule can only be managed by the connected account for Stanard but the platform)foo" },
    { "ynnnoj", R"foo(should be able to schedule a manual payout. Is this not the case?)foo" },
    { "ynnnoj", R"foo(keithm: That difference is highlighted here: https://stripe.com/docs/connect/manage-payout-schedule)foo" },
    { "ynnnoj", R"foo(keithm: Let me try replicate that, bear with me)foo" },
    { "ynnnoj", R"foo(hillct: Which webhook? Generally you'd create the subscription on your server before collecting the payment method details (as per that guide))foo" },
    { "ynnnoj", R"foo(hillct: Not sure what you're referring to by the 'customer secret'? The `client_secret` of the PaymentIntent?)foo" },
    { "ynnnoj", R"foo(hillct: Ah just seen your message beneath the long one, my bad!)foo" },
    { "ynnnoj", R"foo(hillct: The subscription has to be created server side. So depending on your integration/application that could work a few ways)foo" },
    { "ynnnoj", R"foo(hillct: Can you share code via pastebin.com or a Gist? A lot easier to read/diges)foo" },
    { "ynnnoj", R"foo(keithm: When you say it throws an exception, you mean trying to update those fields?)foo" },
    { "ynnnoj", R"foo(hillct: Ah, got it yes. This section is for creating the initial subscription (server-side): https://stripe.com/docs/billing/subscriptions/elements#create-subscription)foo" },
    { "ynnnoj", R"foo(keithm: That's weird, I can access them on a Standard connected account. Can you share the full code?)foo" },
    { "ynnnoj", R"foo(hillct: No you'd need to access `client_secret` on the front-end to pass to `confirmCardPayment` from Stripe.js. You'd also pass the Elements card instance there, which will prompt the user for any required auth (3DS) on the card and finally start the subscription)foo" },
    { "ynnnoj", R"foo(hillct: This part: https://stripe.com/docs/billing/subscriptions/elements#complete-paymen)foo" },
    { "ynnnoj", R"foo(hillct: That's on your front-end (React, JS/HTML, etc))foo" },
    { "ynnnoj", R"foo(hillct: The `client_secret` is returned from your Create Subscription call on a server-side function somewhere)foo" },
    { "ynnnoj", R"foo(keithm: Can you share the account ID in question?)foo" },
    { "ynnnoj", R"foo(hillct: Sorry to hear that. Happy to help you with your migration and clear up any documentation niggles as we go)foo" },
    { "ynnnoj", R"foo(hillct: Np! Can talk more on your return)foo" },
    { "ynnnoj", R"foo(keithm: Is it only the case on this 1 account with `type: 'standard'` or are there others too?)foo" },
    { "ynnnoj", R"foo(keithm: I've standard connected accounts with no external accounts but still have payout settings)foo" },
    { "ynnnoj", R"foo(keithm: So this is mostly unexpected I would say!)foo" },
    { "ynnnoj", R"foo(keithm: I don't think so, there's nothing in the diff to indicate a change: https://github.com/stripe/stripe-python/compare/v2.54.0...v2.58.0)foo" },
    { "ynnnoj", R"foo(keithm: P)foo" },
    { "ynnnoj", R"foo(keithm: What is you just retrieve that account? https://stripe.com/docs/api/accounts/retrieve)foo" },
    { "ynnnoj", R"foo(keithm: Is the `settings.payouts` hash missing from the response?)foo" },
    { "ynnnoj", R"foo(keithm: I've found the API request that created this account: https://dashboard.stripe.com/test/logs/req_yWd8K9bQ3w99Bz)foo" },
    { "ynnnoj", R"foo(keithm: You can see in the response `settings.payouts.schedule` exists)foo" },
    { "ynnnoj", R"foo(keithm: Beginning to think its emitted from the event payload for some reason (perhaps unintentionally))foo" },
    { "synthrider", R"foo(zodnod: hey there)foo" },
    { "synthrider", R"foo(zodnod: No, you need to combine those into the `amount` for the PaymentIntent, but you can show the itemized split in any receipt or other email you send them.)foo" },
    { "synthrider", R"foo(dizzyLand: hey there, can you say a bit more? are you trying to replace the current subscribed price with another price?)foo" },
    { "synthrider", R"foo(dizzyLand: Ok thanks)foo" },
    { "synthrider", R"foo(dizzyLand: you can do this by specifying the item `id` in the `items` array of the update request, providing the existing `id` from the subscription)foo" },
    { "synthrider", R"foo(subscription item*)foo" },
    { "synthrider", R"foo(dizzyLand: you can either update the subscription and provide the new `items` details:)foo" },
    { "synthrider", R"foo(https://stripe.com/docs/api/subscriptions/update#update_subscription-items-id)foo" },
    { "synthrider", R"foo(or update the subscription item directly, yes:)foo" },
    { "synthrider", R"foo(https://stripe.com/docs/api/subscription_items/update#update_subscription_item-price)foo" },
    { "synthrider", R"foo(dizzyLand: you'd get this by inspecting the subscription `items` that you already have:)foo" },
    { "synthrider", R"foo(https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id)foo" },
    { "synthrider", R"foo(Ankur: hey there)foo" },
    { "synthrider", R"foo(Ankur: let me take a look into this - give me a few minutes :))foo" },
    { "ynnnoj", R"foo(keithm: Ah, so even when querying for the account (`/v1/accounts/:id`) and the `settings.payouts` hash is omitted?)foo" },
    { "ynnnoj", R"foo(keithm: I (wrongly) assumed you were reading the event payload JSON. Is this not the case? I can't see any requests on your account where you retrieve the account in question)foo" },
    { "synthrider", R"foo(Ankur: hey there, it doesn't look like there's any way to support this right now, after a thorough review of the Terminal functions. Is this causing a problem for you somewhere, or are you trying to make your payment flows more similar?)foo" },
    { "synthrider", R"foo(ngoc: hey there)foo" },
    { "synthrider", R"foo(ngoc: For help with Sigma I'd recommend contacting support with the details of what you're trying to do:)foo" },
    { "synthrider", R"foo(https://support.stripe.com/contac)foo" },
    { "synthrider", R"foo(Ankur: I've noted the feedback, thanks! Can you share your account id or an example payment or other object i use to associate with your account so we can reach out if we build this in future?)foo" },
    { "synthrider", R"foo(Ankur: perfect, thanks!)foo" },
    { "ynnnoj", R"foo(keithm: Can you share that request ID you just made?)foo" },
    { "ynnnoj", R"foo(amalgame1te: Hey! Correct, the fee is only applicable on transactions where tax are calculated: https://stripe.com/docs/tax/faq#pricing)foo" },
    { "synthrider", R"foo(dagdigg: hey there)foo" },
    { "synthrider", R"foo(dagdigg: You can finalize that draft invoice to trigger payment:)foo" },
    { "synthrider", R"foo(https://stripe.com/docs/api/invoices/finalize)foo" },
    { "ynnnoj", R"foo(amalgame1te: Correct, you need to register your tax obligations: https://stripe.com/docs/tax/set-up#adding-registrations-in-stripe-tax)foo" },
    { "synthrider", R"foo(dagdigg: yep, this is how i do it when testing. you can automate it with a webhook if you want to.)foo" },
    { "ynnnoj", R"foo(amalgame1te: To be clear you wouldn't be charged for the tax calculation if there was no actual transaction is completed)foo" },
    { "synthrider", R"foo((using invoice.created events))foo" },
    { "synthrider", R"foo(dagdigg: np!)foo" },
    { "synthrider", R"foo(you too :))foo" },
    { "ynnnoj", R"foo(amalgame1te: Yep, that's right. You need to tell us where you're required to collect tax and then we'll only calculate it in those scenarios :))foo" },
    { "ynnnoj", R"foo(amalgame1te: No problem, glad I could help!)foo" },
    { "ynnnoj", R"foo(33: Hey there)foo" },
    { "ynnnoj", R"foo(33: I'm not sure I understand the question. Can you please clarify?)foo" },
    { "hmunoz", R"foo(33: hello)foo" },
    { "karllekko", R"foo(33: hmm, well you could prevent the form submission in Javascript(like add the `disabled` attribute to the form submission button))foo" },
    { "karllekko", R"foo(but no there's no way to get the PaymentMethod ID unless you already have it (which you do on the frontend) , you can't list them in general if they're not already attached to an existing customer)foo" },
    { "hmunoz", R"foo(matt11: hello, there's no way to invalidate a cached idempotent response, you would make a new request with a new idempotent key in that case)foo" },
    { "hmunoz", R"foo(matt11: yep there is no)foo" },
    { "hmunoz", R"foo(keithm: hello, I'm around and reading the scrollback)foo" },
    { "hmunoz", R"foo(Ian: hello, looking)foo" },
    { "hmunoz", R"foo(Ian: as far as I know, you have to create the InvoiceItems first, then the Invoice)foo" },
    { "hmunoz", R"foo(samwise: hello, you need to use Stripe's prebuilt UI components to be in a good PCI scope, so yes you do need to use either PaymentSheet or STPPaymentCardTextField)foo" },
    { "hmunoz", R"foo(keithm: what you're seeing is expected, you do see the full response on a Standard account when it is created but after that, it is expected you don't get access to any of the `settings` hash it is expected that the Standard account handles this on its own)foo" },
    { "hmunoz", R"foo(keithm: no there isn't a list like that, just how Standard accounts work really)foo" },
    { "hmunoz", R"foo(keithm: glad to help!)foo" },
    { "hmunoz", R"foo(zodnod: hello, are you using the Stripe CLI?)foo" },
    { "hmunoz", R"foo(zodnod: I see, do you have any examples of a PaymentIntent that got stuck? when you say "stuck", the API response returns `status: succeeded` but never fires the webhook, right?)foo" },
    { "hmunoz", R"foo(zodnod: looking)foo" },
    { "hmunoz", R"foo(zodnod: you never captured that PaymentInten)foo" },
    { "hmunoz", R"foo(zodnod: you have to capture it for it to transition to `succeeded`, you only confirmed i)foo" },
    { "hmunoz", R"foo(zodnod: because)foo" },
    { "hmunoz", R"foo(zodnod: you are probably creating some PaymentIntents with `capture_method: "manual",` and some without tha)foo" },
    { "hmunoz", R"foo(hillct: hello, yes you should create PaymentMethods instead of Tokens. Also, you should use Stripe.js and Elements for this instead of passing the raw card details manually)foo" },
    { "hmunoz", R"foo(zodnod: ok then your code is presumably capturing some PaymentIntents (server-side) but not others. This one wasn't captured at all, so there is no `charge.succeeded` even)foo" },
    { "hmunoz", R"foo(hillct: which part seems like an odd design choice?)foo" },
    { "hmunoz", R"foo(o clarify, you create a PaymentIntent on the server. You return its `client_secret` to your webpage.)foo" },
    { "hmunoz", R"foo(Your webpage uses the CardElement UI component and "confirms" the PaymentIntent on the webpage, handling any SCA authenticaiton in one go)foo" },
    { "hmunoz", R"foo(zodnod: where are you capturing the PaymentIntent though, you have to capture the PaymentIntent server-side for the `charge.succeeded` event to happen. Just confirming client-side won't capture the PaymentInten)foo" },
    { "hmunoz", R"foo(zodnod: ah that is backwards then, you have to flip it, listen to `payment_intent.amount_capturable` event and then capture)foo" },
    { "hmunoz", R"foo(hillct: ah you're right, those examples are passing the entire SetupIntent object back. You can do that but just passing `client_secret` from the response is sufficient, so you can just return that alone too)foo" },
    { "hmunoz", R"foo(zodnod: when you've captured the amount and funds have been taken from the customer's card. It looks like you're authorizing the customer's card but then capturing immediately, are you? Or are you capturing like hours/days later? cause if not, then it doesn't sound like you need to use `capture_method: manual`)foo" },
    { "hmunoz", R"foo(zodnod: so why not just remove `capture_method: manual` entirely? It will immediately capture the payment on the client-side confirm.)foo" },
    { "hmunoz", R"foo(hillct: ah good question, and yes that would be reasonable. In that case, you don't actually have to use any SetupIntents.)foo" },
    { "hmunoz", R"foo(As you mentioned, create a Customer, add InvoiceItems to the Customer, create an Invoice on the Customer, finalize the Invoice, then take the `invoice.payment_intent.client_secret` and pass that to your webpage. Your webpage confirms that PaymentIntent, leading to "paying" of the Invoice.)foo" },
    { "hmunoz", R"foo(zodnod so why not just remove `capture_method: manual` entirely? It will immediately capture the payment on the client-side confirm.)foo" },
    { "hmunoz", R"foo(zodnod: so why not just remove `capture_method: manual` entirely? It will immediately capture the payment on the client-side confirm.)foo" },
    { "hmunoz", R"foo(zodnod: yep, try it out in test mode, much simpler. After you confirm client-side, just listen to `charge.succeeded` event and fulfill the order, send emails, etc. No need to set manual capture, then make 1x more API call to capture etc)foo" },
    { "hmunoz", R"foo(zodnod: glad to help!)foo" },
    { "hmunoz", R"foo(hillct: good question, one sec)foo" },
    { "hmunoz", R"foo(hillct: trying something)foo" },
    { "hmunoz", R"foo(hillct: yep that would be easiest. Also you can use `confirmCardPayment()`, `handleCardPayment()` was the same except it was deprecated over a year ago. https://stripe.com/docs/js/payment_intents/confirm_card_payment#stripe_confirm_card_payment-data-setup_future_usage)foo" },
    { "hmunoz", R"foo(hillct: your suggestion is actually better than mine, my suggestion was to update `setup_future_usage` server-side but what you have works better)foo" },
    { "Rubeus", R"foo(hillct: Hello! hmunoz had to step away, but I'd be happy to help you! Give me a few minutes to catch up...)foo" },
    { "Rubeus", R"foo(hillct: Which mandate are you talking about specifically? Mandates aren't usually an issue when taking card payments.)foo" },
    { "Rubeus", R"foo(zzw: Hello! It's likely because you haven't responded with success to the `invoice.created` event sent to your webhook endpoint. Can you give me the Invoice's ID?)foo" },
    { "Rubeus", R"foo(zzw: Taking a look, hang on...)foo" },
    { "Rubeus", R"foo(hillct: To clarify, are you talking about a mandate you need to specify in the Stripe API, or is this something entirely on your end?)foo" },
    { "Rubeus", R"foo(noble: Not that I'm aware of. What issues are you seeing?)foo" },
    { "Rubeus", R"foo(hillct: Correct, at least as far as I know. We have specific mandate requirements for SEPA Direct Debit and BECS, but I'm not aware of anything similar for card payments.)foo" },
    { "Rubeus", R"foo(zzw: Yeah, your webhook endpoints have pending events. The Invoice won't finalize until you respond successfully to those events.)foo" },
    { "Rubeus", R"foo(zzw: You have two different webhook endpoints with pending events.)foo" },
    { "Rubeus", R"foo(hillct: No problem! :))foo" },
    { "Rubeus", R"foo(Here's one of the pending ones showing delivery failure (looks like your webhook endpoint is returning a 429): https://dashboard.stripe.com/test/events/evt_1J0rlFDAWTp2PXOwFX641rEO)foo" },
    { "Rubeus", R"foo(zzw: The message above is for you.)foo" },
    { "Rubeus", R"foo(zzw: You can see the error rates for all your webhook endpoints here: https://dashboard.stripe.com/test/webhooks)foo" },
    { "Rubeus", R"foo(noble: I can't find anything internally about problems with 2FA. I recommend you contact support for further assistance: https://support.stripe.com/contact/email)foo" },
    { "Rubeus", R"foo(zzw: Yep, that's correct. See here: https://stripe.com/docs/billing/subscriptions/webhooks#understand)foo" },
    { "Rubeus", R"foo(zzw: Usually individual developers have their own test accounts to prevent this kind of issue. You can easily create a new test account by clicking on the account switcher in the top left of the Dashboard and choosing the "new account" option there.)foo" },
    { "Rubeus", R"foo(zzw: Correct. It only takes a single delivery failure to prevent the Invoice from being finalized. Again, separate test accounts are recommended.)foo" },
    { "Rubeus", R"foo(zzw: You can also use Stripe CLI to listen for events locally during development instead of using a webhook endpoint + ngrok. Stripe CLI delivery failures don't work the same as actual webhook endpoints; delivery won't be retried and delivery failures won't stop Invoices from being finalized: https://stripe.com/docs/cli/listen)foo" },
    { "Rubeus", R"foo(Edogio: Hello! Can you provide more details? Are you getting an error that specifies some kind of limit?)foo" },
    { "Rubeus", R"foo(noble: It might be something specific to your Stripe account, which I can't help you with here. That's why I recommended you contact our support team. They can access your account and determine if there's an issue.)foo" },
    { "Rubeus", R"foo(zzw: Not sure what you mean by "works the same way", can you provide more details?)foo" },
    { "Rubeus", R"foo(Edogio: I'm honestly not sure if there's a limit either. I don't believe there's any way to see if there is from the API, but this is a better question for our support team than here: https://support.stripe.com/contact/email)foo" },
    { "Rubeus", R"foo(zzw: I recommend finalizing the Invoice via the API rather than using the Dashboard: https://stripe.com/docs/api/invoices/finalize)foo" },
    { "Rubeus", R"foo(zzw: I'm not 100% sure what the button in the Dashboard does; the API is more specific and gives you greater control over exactly what's happening.)foo" },
    { "Rubeus", R"foo(pod: Hello! Taking a look, hang on...)foo" },
    { "Rubeus", R"foo(pod: Can you link to a screenshot showing the expanded error with the full stack trace?)foo" },
    { "Rubeus", R"foo(pod: Actually, I think this might be because `data['customerId']` is `None`. Can you log out the value of `data['customerId']` immediately before this code to confirm the value is what you expect?)foo" },
    { "Rubeus", R"foo(pod: Happy to help!)foo" },
    { "Rubeus", R"foo(ryand: Hello! What issues are you having?)foo" },
    { "Rubeus", R"foo(ryand: Can you provide the exact `stripe listen` command you used?)foo" },
    { "Rubeus", R"foo(ryand: And what `curl` command did you use to test that URL?)foo" },
    { "Rubeus", R"foo(ryand: That all looks correct to me. What are you seeing instead of the 200 response?)foo" },
    { "Rubeus", R"foo(ryand: Oh, okay, so no events are being triggered? What events are you expecting?)foo" },
    { "Rubeus", R"foo(ryand: You're doing that in a separate CLI window while `stripe listen` is active in the other CLI window?)foo" },
    { "Rubeus", R"foo(ryand: Hm. If you terminate your existing `stripe listen --forward-to` command and run just `stripe listen` without forwarding, then trigger the event again, does that show up as expected?)foo" },
    { "Rubeus", R"foo(ryand: Is it possible the two instances of Stripe CLI are logged into different accounts?)foo" },
    { "Rubeus", R"foo(ryand: If you do `stripe get account` in both windows do you get the same account ID at the top of the response?)foo" },
    { "Rubeus", R"foo(ryand: Can you give me the event ID of one of the events you've tried?)foo" },
    { "Rubeus", R"foo(ryand: Not seeing anything amiss on our end for that event. Has `stripe listen` worked correctly before, or has it never worked for you?)foo" },
    { "Rubeus", R"foo(noble: You got the text, it just took an hour to get there?)foo" },
    { "Rubeus", R"foo(netameta: You can switch to React at the top of our integration builder: https://stripe.com/docs/payments/integration-builder)foo" },
    { "Rubeus", R"foo(ryand: What version does `stripe version` report?)foo" },
    { "Rubeus", R"foo(ryand: Hopefully 1.6.3?)foo" },
    { "Rubeus", R"foo(ryand: There could be something blocking the network connection `stripe listen` uses. Just to confirm, you get the `Ready! Your webhook signing secret is...` message after running `stripe listen`, right?)foo" },
    { "Rubeus", R"foo(noble: Sorry it took so long! Maybe something was amiss temporarily somewhere?)foo" },
    { "Rubeus", R"foo(ryand: Does `stripe logs tail` work and show API request logs as you make them?)foo" },
    { "Rubeus", R"foo(ryand: https://stripe.com/docs/cli/logs/tail)foo" },
    { "Rubeus", R"foo(ryand: Okay, that's a good sign! Will you try `stripe listen --log-level debug` and see what the output is like? Any errors or strangeness there?)foo" },
    { "Rubeus", R"foo(ryand: Nope, no webhook endpoint is required or anything like that. It should work without any other setup.)foo" },
    { "Rubeus", R"foo(ryand: Ah, now we're getting somewhere! :D)foo" },
    { "Rubeus", R"foo(ryand: So what should be happening is Stripe CLI should be getting two versions of each event in two different API versions, with only one of them being filtered out. That's not happening for some reason... let me investigate a bit.)foo" },
    { "Rubeus", R"foo(ryand: Can you try `stripe listen --latest` and see if that works as expected?)foo" },
    { "Rubeus", R"foo(ryand: Yay! You can add on the `--forward-to` bits and it should work with that combination.)foo" },
    { "Rubeus", R"foo(ryand: To clarify, though, `--latest` shouldn't be required to get this working. By default `stripe listen` should listen for/forward events using your default API version (it should actually receive events in both your default API version and the latest, but filter the non-default ones out). That's not happening for you for some reason, so I'll flag internally so we can get this fixed.)foo" },
    { "Rubeus", R"foo(ryand: In the meantime `--latest` should function as a workaround.)foo" },
    { "Rubeus", R"foo(ryand: If you want to receive updates go to https://support.stripe.com/contact/email and fill out the form to create a support ticket. Provide details about your issue and mention me (Rubeus) in your message. Let me know when you've submitted the form so I can grab your ticket and follow up later.)foo" },
    { "Rubeus", R"foo(ryand: Got it! I'll respond there shortly, and then again later when I have more information about a fix. :))foo" },
    { "turbotime", R"foo(ethanw14: You likely want `charge.successful` instead, that will trigger for any and all successful payments)foo" },
    { "turbotime", R"foo(ethanw14: or you need to set up a connect: true Endpoint on your platform)foo" },
    { "turbotime", R"foo(ethanw14: https://stripe.com/docs/connect/webhooks)foo" },
    { "Rubeus", R"foo(ryand: You too!)foo" },
    { "turbotime", R"foo(ricko: We can help with coding/integration questions here, sure)foo" },
    { "turbotime", R"foo(ricko: Sounds like you're making a backend call on the frontend. What are you attempting to do and in what language?)foo" },
    { "turbotime", R"foo(ricko: You'd make this call with your secret key on the backend then https://stripe.com/docs/api/products/list?lang=php)foo" },
    { "turbotime", R"foo(ethanw14: You can use whatever URL naming you like, doesn't matter from our side)foo" },
    { "turbotime", R"foo(ricko: Yep, secret key when in PHP, publishable key anywhere you're using Stripe.js in the browser)foo" },
    { "turbotime", R"foo((and never expose your secret key to the browser))foo" },
    { "turbotime", R"foo(asaeed: The support team can answer any Level 3 data questions via https://support.stripe.com/contac)foo" },
    { "turbotime", R"foo(ricko: You should never put your secret key anywhere in the HTML, basically.)foo" },
    { "turbotime", R"foo(kaizendev: What specifically are you running into issues with?)foo" },
    { "turbotime", R"foo(kaizendev: generally you'd follow https://stripe.com/docs/card-testing#captcha or redesign what and how you create customers)foo" },
    { "turbotime", R"foo(Ian: The invoice items will go to the new Invoice, yep. Try it in test mode to see if that field updates.)foo" },
    { "turbotime", R"foo(Ian: You should really try exactly the flows you want in test mode, you'll see exactly what happens.)foo" },
    { "turbotime", R"foo(you too!)foo" },
    { "turbotime", R"foo(hillct: it should finalize by default, give it a try in test mode and you'll see the exact behavior.)foo" },
    { "turbotime", R"foo(deh325: It will, you can see the event fire in test mode)foo" },
    { "turbotime", R"foo(Guest15064: You want to create a PaymentMethod instead of a Token these days (https://stripe.com/docs/js/payment_methods/create_payment_method) but otherwise yes, just don't attach to a Customer)foo" },
    { "turbotime", R"foo(ricko: What do you mean by "sessions flag"?)foo" },
    { "turbotime", R"foo(ricko: That doesn't appear to be anything in Stripe's API, but that code would generate a new string every pageload, by the look of it.)foo" },
    { "turbotime", R"foo(ricko: That's not Stripe-specific but yeah, what you have there will give each session a unique value in PHP)foo" },
    { "koopajah", R"foo(hillct : nope)foo" },
    { "koopajah", R"foo(1/ create an invoice item. 2/ create an invoice. 3/ add invoice items to that invoice (there's an `invoice` parameter for this. 4/ finalize)foo" },
    { "koopajah", R"foo(hmmm yeah, I mean if you do it sequentially you don't need to validate much. Just do calls sequentially)foo" },
    { "koopajah", R"foo(hillct : no, that's the opposite of what I said though. You create *one invoice item*. Then the invoice and then you add each invoice item one by one to it, sequentially and when it fails you know it fails so you don't finalize until after you added all of them)foo" },
    { "koopajah", R"foo(awad334 : you can not get the card number. That'd be breaking PCI compliance, we handle this and you save the card in your Stripe accoun)foo" },
    { "koopajah", R"foo(awad334 : the `onChange` event is just for you to track the card brand or expiration date. You can't access the raw details. Either you create a PaymentMethod or confirm a PaymentIntent for example and that stores the card in Stripe yes)foo" },
    { "koopajah", R"foo(hillct : because that's how the API works. You can't create an Invoice that is "empty". If you try, you get an error. It's a limitation today. You have to create one pending item first to be allowed to create the invoice (which pulls in that item automatically) and then you "append" more items to that invoice)foo" },
    { "koopajah", R"foo(hillct : sorry you've been talking about invoices for a few days so I assumed you were already familiar with that par)foo" },
    { "koopajah", R"foo(awad334 : What is your code doing though other than collecting card details? Are you confirming a PaymentIntent or a SetupIntent? What is your code doing?)foo" },
    { "koopajah", R"foo(hillct : sure thing! Let me know if we can help further!)foo" },
    { "koopajah", R"foo(awad334 : which doc page are you following?)foo" },
    { "koopajah", R"foo(okay, so when you confirm that PaymentIntent, does it succeed? Do you have an example pi_12345 I can look at?)foo" },
    { "koopajah", R"foo(yep I know. Can you give me a pi_12345 to look at?)foo" },
    { "koopajah", R"foo(can you share it? I need it to look at i)foo" },
    { "koopajah", R"foo(hanks looking)foo" },
    { "koopajah", R"foo(awad334 : so your code creates the PI server-side, that works, but you are never confirming it client-side. Are you sure your code is properly calling the confirm method?)foo" },
    { "koopajah", R"foo(ahhhh)foo" },
    { "koopajah", R"foo(you are not supposed to pass the card number and expiration date at all, you're supposed to pass the CardField)foo" },
    { "koopajah", R"foo(which doc are you looking at?)foo" },
    { "koopajah", R"foo(which UI are you following at the top "Prebuilt UI (single-step)", "Prebuilt UI (multi-step)", "Card element only")foo" },
    { "koopajah", R"foo(multi-step means you still use our pre-built UI right?)foo" },
    { "koopajah", R"foo(you don't, I'm just asking which exact doc you are following to help you)foo" },
    { "koopajah", R"foo(here are many ways to integrate Stripe, and so making sure you read the right doc helps)foo" },
    { "koopajah", R"foo(my guess is you are on "Card element only" since you use CardField yourself)foo" },
    { "koopajah", R"foo(all good)foo" },
    { "koopajah", R"foo(https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=custom#react-native-submit-payment are you following this exact example?)foo" },
    { "koopajah", R"foo(yes it should be enough)foo" },
    { "koopajah", R"foo(yes and no. It's just sent automatically as part of the confirmation)foo" },
    { "koopajah", R"foo(yeah that sentence is a bit confusing, they just means that you can save this information in your app / cache i)foo" },
    { "koopajah", R"foo(awad334 : correc)foo" },
    { "koopajah", R"foo(he card will *not* be saved in the sense that you can't re-use that card later without collecting card details again)foo" },
    { "koopajah", R"foo(hat's because you are not saving the card with `setup_future_usage: 'off_session'`)foo" },
    { "koopajah", R"foo(also you don't need to pass `confirm: false` (it's the default))foo" },
    { "koopajah", R"foo(correc)foo" },
    { "koopajah", R"foo(sure thing!)foo" },
    { "koopajah", R"foo(of course, just ask!)foo" },
    { "koopajah", R"foo(yes it will just work and you can try some of the test card numbers https://stripe.com/docs/testing#regulatory-cards)foo" },
    { "koopajah", R"foo(yes it does everything for you!)foo" },
    { "koopajah", R"foo(you never need ephemeral key for this)foo" },
    { "koopajah", R"foo(You too)foo" },
    { "koopajah", R"foo(and please come back if you have more questions :))foo" },
    { "koopajah", R"foo(bolani : correct, it's not going to work on PaymentIntents. We're building a newer API for this that will support automatic tax calculation)foo" },
    { "koopajah", R"foo(bolani : beta hopefully this year)foo" },
    { "koopajah", R"foo(yay!)foo" },
    { "koopajah", R"foo(dbh215 : looking)foo" },
    { "koopajah", R"foo(Shane : you should really never build it this way with Standard accounts.)foo" },
    { "koopajah", R"foo(You should not create a charge on the platform and then transfer funds. you should always use direct charges https://stripe.com/docs/connect/direct-charges (which means 2 separate charges, one per connected account))foo" },
    { "koopajah", R"foo(Shane : Yeah but you also should never be using Standard accounts at all in this flow. This is a clear no, my entire team (who answers here) know this, we spend countless hours convincing developers to never do Standard + destination or Standard + Separate charges and transfers)foo" },
    { "koopajah", R"foo(in the flow you have you should be using Custom or Express account, never Standard)foo" },
    { "koopajah", R"foo(There are many, but the experience for the end user with Dashboard access is really poor since all they see is incoming funds without any control over it, they lose a lot of value over the product/Stripe and it's just a bad experience, on top of putting your own business at risk since you have limited to no control over how we assess them risk-wise)foo" },
    { "koopajah", R"foo(Moving to Express would make sense.)foo" },
    { "koopajah", R"foo(Now with that out of the way, you can't really have multiple currencies. There'll always be one that has to be FX-ed at some poin)foo" },
    { "koopajah", R"foo(I really think that, unless you charge the card across 5 or 10 accounts, Standard + Direct is the best way to go)foo" },
    { "koopajah", R"foo(ah so yeah Express is likely best since you already crossed over the "hold liability for disputes and refunds" anyway)foo" },
    { "koopajah", R"foo(You mostly can't do it perfectly. You choose one main currency, and then the other one will have to get FX)foo" },
    { "koopajah", R"foo(sorry too used to acronym, it's foreign exchange rate)foo" },
    { "koopajah", R"foo(So if you're US based and you want to charge say $50 for account A in the US and £30 for account B in the UK, you end up charging $98 total, you send $50 to account A and you send $48 to account B which will convert to GBP in their balance (with today's exchange rate) and more or less give them £30.)foo" },
    { "koopajah", R"foo(That is where you won't like my answer and I won't like having to say so)foo" },
    { "koopajah", R"foo(it's... not great :()foo" },
    { "koopajah", R"foo(So yeah you have to find third-party exchange rate APIs but they won't exactly match our rates either and we... don't have an API for it. You basically transfer $48 and then you see what that leads to in GBP)foo" },
    { "koopajah", R"foo(It's quite tricky.)foo" },
    { "koopajah", R"foo(But let's say you're a customer: you order from a US store and a French store. You expect a total in USD, not a subtotal in USD and then EUR. If you had the latter, you'd expect 2 charges really)foo" },
    { "koopajah", R"foo(so I think most companies in your situation either force everyone to price in USD (fine if most of your users are in the US or selling to US customers). Others will allow merchants to price in local currencies but also have a default price in USD (and then it's like Apple's IAP conversions, it's set mostly in advance and it's not "fair" because it has to be resilient to fluctuations). And others have only local currencies and they don't let you)foo" },
    { "koopajah", R"foo("group")foo" },
    { "koopajah", R"foo(haha so many identities!)foo" },
    { "koopajah", R"foo(so I think most companies in your situation either force everyone to price in USD (fine if most of your users are in the US or selling to US customers). Others will allow merchants to price in local currencies but also have a default price in USD (and then it's like Apple's IAP conversions, it's set mostly in advance and it's not "fair" because it has to be resilient to fluctuations). And others have only local currencies and they don't let you)foo" },
    { "koopajah", R"foo("group")foo" },
    { "koopajah", R"foo(hat was my last answer)foo" },
    { "koopajah", R"foo(doing Direct charges with non standard accounts is highly discourage)foo" },
    { "koopajah", R"foo(discouraged* :p)foo" },
    { "koopajah", R"foo(Shane : Standard + Direct and separate charges is the best :))foo" },
    { "koopajah", R"foo(Cali : there is no such signal in the API, we don't have a way to say/indicate this at all today unfortunately)foo" },
    { "koopajah", R"foo(githubmgw : hello! Test card numbers don't work in production. If they did, everyone would use them to pay online! And you really are not supposed to test with a real card, this is banned by card networks and you could get in trouble. You test your code in Test mode, so that you're confident it works in production since it'd be the same code)foo" },
    { "koopajah", R"foo(Shane : sure thing!)foo" },
    { "flying_sausages", R"foo(his channel has moved, I assume?)foo" },
    { "moniker--", R"foo(hi, is this pretty much what's needed to enable proton in stable channel firefox v88.0.1 ? https://i.imgur.com/srRxFl1.png)foo" },
    { "inoas", R"foo(We miss you over at irc.libra.chat after FN has been taken over by some billionaire - As it is forbidden to put this in a topic, I am certain posting this once in a while in the chat here is a good free speech measure of making sure we don't break up as a community)foo" },
    { "flying_sausages", R"foo(see you there!)foo" },
    { "Cork", R"foo(Peng: your around?)foo" },
    { "Peng", R"foo(Cork: Kind of)foo" },
    { "Cork", R"foo(Peng: just wanted to query, har do you have an opinion about saying here or moving to libera/keeping both?)foo" },
    { "Cork", R"foo(he channel over there is starting to get quite a bit of users so i think we need to think about i)foo" },
    { "Peng", R"foo(Cork: I *want* to move, but I'm uncomfortabledoing anything given the semi-official status of this channel.)foo" },
    { "Cork", R"foo(ya, exactly my point of view)foo" },
    { "Cork", R"foo(not sure of any active contact though)foo" },
    { "Cork", R"foo(but the channel over there is unregistered and it has close to half the users here)foo" },
    { "Cork", R"foo(so feels like something needs to be done)foo" },
    { "oxek", R"foo(Peng: this channel should be ##firefox anyway then)foo" },
    { "oxek", R"foo(and this channel has even lost its founder)foo" },
    { "oxek", R"foo(here is no one left on the access list to this channel who can make any big changes anyway)foo" },
    { "Cork", R"foo(kinda true ya)foo" },
    { "oxek", R"foo(can still do /mode #firefox +imnstf ##firefox)foo" },
    { "oxek", R"foo(if you have ops)foo" },
    { "oxek", R"foo(and manually kick everyone instead of using ChanServ CLEAR)foo" },
    { "oxek", R"foo(I find it in bad taste to redirect unregistered users to #firefox-unregistered, asking them to register on a network that is at odds with mozilla's values)foo" },
    { "JustLandedOnMars", R"foo(SeeALot: how is it going ?)foo" },
    { "Delvien", R"foo(alright, this is fun. Updated to 89, now every website gives me: Your connection is not secure Error code: NS_ERROR_NET_INADEQUATE_SECURITY)foo" },
    { "oxek", R"foo(Delvien: example website?)foo" },
    { "Delvien", R"foo(Any.)foo" },
    { "Delvien", R"foo(google, outlook, gmail, duckduckgo, every https website)foo" },
    { "Delvien", R"foo(had to set this to false: network.http.spdy.enabled.http2, which i shouldnt have to do)foo" },
    { "txtsd", R"foo(Is anyone else getting NS_ERROR_NET_INADEQUATE_SECURITY on github with firefox 89?)foo" },
    { "oxek", R"foo(xtsd: you're the 2nd person in here talking about i)foo" },
    { "oxek", R"foo(here might be an issue)foo" },
    { "txtsd", R"foo(Anyway to quickly debug it?)foo" },
    { "oxek", R"foo(workaround might be to set network.http.spdy.enabled.http2 to false)foo" },
    { "txtsd", R"foo(uh)foo" },
    { "txtsd", R"foo(That made it work, but I don't want to have to disable http23)foo" },
    { "txtsd", R"foo(*http2)foo" },
    { "oxek", R"foo(I literally just learned about this, I don't have any more info)foo" },
    { "oxek", R"foo(just a user like you)foo" },
    { "oxek", R"foo(also there might be more activity in the #firefox channel on the libera.chat IRC network)foo" },
    { "Delvien", R"foo(same problem.)foo" },
    { "oxek", R"foo(xtsd: alternative is to use the ESR versions of firefox)foo" },
    { "Delvien", R"foo(might be time to switch browsers lol. Proton also sucks)foo" },
    { "oxek", R"foo(hat's what I do, so that I don't have to deal with this mess every 4 weeks.)foo" },
    { "txtsd", R"foo(libera's #firefox has no /topic)foo" },
    { "Delvien", R"foo(New update also made it so my CSS doesnt autohide my URL bar :/)foo" },
    { "oxek", R"foo(xtsd: doesn't matter, it is still about firefox and people are active in there)foo" },
    { "txtsd", R"foo(Thanks. Hopefully there'll be a bugfix release)foo" },
    { "txtsd", R"foo(Are these UI changes landing in thunderbird too?)foo" },
    { "SeeALot", R"foo(JustLandedOnMars: Eh.)foo" },
    { "SeeALot", R"foo(JustLandedOnMars: Oh, my backlog remembers! … :D)foo" },
    { "SeeALot", R"foo(Well, haven't gotten Wayfire up again, a system update seems to have installed some broken dependencits.)foo" },
    { "SeeALot", R"foo(Peng, Cork: I'm here to stay and generally support rasengan.)foo" },
    { "SeeALot", R"foo(Might be that the channel would have to be put into ## namespace to get it into alignment with channel name policy.)foo" },
    { "Peng_", R"foo(Well, when we leave, I imagine rasengan and his merry band of bigots, trolls and Rizon rejects will hijack the channel and do that at some point.)foo" },
    { "SeeALot", R"foo(Guess it had been grandfathered in thus far—Has there ever been an officially sanctioned channel, by Mozilla, on this network?)foo" },
    { "Peng_", R"foo(Yes, this channel.)foo" },
    { "SeeALot", R"foo(Oh, so before they got their own network?)foo" },
    { "SeeALot", R"foo(Or in parallel with it, for some reason.)foo" },
    { "oxek", R"foo(Peng_: better to leave on your own terms instead of letting them do i)foo" },
    { "Peng_", R"foo(SeeALot: I'm not sure. I think it was before my time.)foo" },
    { "SeeALot", R"foo(oxek: Please don't be so goddarn hostile. :/)foo" },
    { "oxek", R"foo(SeeALot: how is that hostile?)foo" },
    { "Peng_", R"foo(One of the # channels I helped run, it took their bots 3 tries to hijack it correctly, and I got automatically k-lined for no reason. xD)foo" },
    { "SeeALot", R"foo(Peng: NickServ says your account dates back 15 years. :D)foo" },
    { "Peng_", R"foo(Yup! irc.mozilla.org was my second-oldest account, before a mishap resulted in it getting dropped, and then the network shut down. :<)foo" },
    { "SeeALot", R"foo(Oh. :/)foo" },
    { "Peng_", R"foo(I don't know how this channel was founded, but as long as I can remember, it was controlled by Mozilla employees, with an official group registration and everything.)foo" },
    { "Peng_", R"foo((i'm not and was not a Mozilla employee or group contact, though.))foo" },
    { "SeeALot", R"foo(Peng_: So, how they reclaimed channels was … unfortunate, probably burned a lot any goodwill left.—However, I was actually one of the people arguing in favor of making abandoned channels accessible for those who want to stay.)foo" },
    { "SeeALot", R"foo(I did not expect such a heavy-handed approach.)foo" },
    { "SeeALot", R"foo(:/)foo" },
    { "SeeALot", R"foo(Any tips for channel ownership in particular? I've already taken on the Void Linux community channel.)foo" },
    { "SeeALot", R"foo(Oh, and Alpine's as well, but somehow it's funky and I'm actually just waiting for someone who actually wants it as I'm not running Alpine.)foo" },
    { "oxek", R"foo(he biggest tip is that #channel should be owned by someone connected to the project, and the channel should remain the primary/active channel of the project. Otherwise redirect it to ##channel)foo" },
    { "SeeALot", R"foo(oxek: yeah, that's legacy.)foo" },
    { "oxek", R"foo(you can even do a community registration and get @about/project/* cloaks)foo" },
    { "SeeALot", R"foo(Not sure I could get those, Cork does have @ community/firefox/…, though.)foo" },
    { "SeeALot", R"foo(Also not my primary focus. I was thinking channel adminstration. I'll need to read up on stuff again, I guess.)foo" },
    { "oxek", R"foo(SeeALot: the one big issue I often see is that channel owners are stingy with giving out ops to people. They should attempt to recruit as many reliable users as possible, so that they can op themselves whenever there are any big issues in the channel (spam/trolls/...))foo" },
    { "SeeALot", R"foo(Like, are some modes preferable or not for non-obvious reasons? Are you using templates within the channel access list? Etc.)foo" },
    { "oxek", R"foo(as opposed to waiting for hours for a an op to come around and deal with i)foo" },
    { "oxek", R"foo(emplates are nice, but not necessary)foo" },
    { "oxek", R"foo(he two critical modes are +nt, the rest is up to you)foo" },
    { "oxek", R"foo(I don't like it when channels disable color using +c, because I like seeing color)foo" },
    { "oxek", R"foo(unfortunately it is a default chanserv mode, that you explicitly need to disable in mlock)foo" },
    { "oxek", R"foo(if you setup chanserv correctly, then you don't need to be afraid of giving enough people channel ops)foo" },
    { "SeeALot", R"foo(oxek: Τrue, I'm wary of people wrecking the place, though.)foo" },
    { "SeeALot", R"foo(Also I fear I might not set it up correctly. ;))foo" },
    { "SeeALot", R"foo(You sound like you have experience?)foo" },
    { "oxek", R"foo(I have some experience)foo" },
    { "oxek", R"foo(and from that experience, perhaps the absolute biggest tip I can give you is: Don't become a channel owner/op/moderator :))foo" },
    { "oxek", R"foo(he amount of nonsense you'll have to deal with is too much)foo" },
    { "SeeALot", R"foo(:D)foo" },
    { "oxek", R"foo(it's much easier to be just a simple user and use /ignore)foo" },
    { "oxek", R"foo(han having to be responsible for anything)foo" },
    { "SeeALot", R"foo(I didn't really intend to—I heard about this matter through some news outlet … Phoronix I think it was? I hadn't been on IRC for months, just following talk and reading chiefly through #voidlinux' backlog took too much time and mental resources I felt.)foo" },
    { "SeeALot", R"foo(So then I started reading up on this stuff, participated in #freenode-policy-feedback and saw those channel leaders leave. I didn't want some jerk to squat on the community channels, so I decided to squat first. :))foo" },
    { "SeeALot", R"foo(This was actually before the … channel liberation incident, I believe.)foo" },
    { "SeeALot", R"foo(So here I am.)foo" },
    { "oxek", R"foo(but #voidlinux is closed on freenode)foo" },
    { "SeeALot", R"foo(Indeed it is.)foo" },
    { "SeeALot", R"foo(o.O?)foo" },
    { "SeeALot", R"foo(I have ##voidlinux)foo" },
    { "SeeALot", R"foo(I'm not officially affiliated.)foo" },
    { "SeeALot", R"foo(“With how many projects left, that rule ought to be reconsidered as well” … I've though to myself, before I took the potential for another outcry into account.)foo" },
    { "kbrosnan", R"foo(The owner of this channel is a mozilla employee)foo" },
    { "SeeALot", R"foo(Maybe in a year's time, if things haven't improved by then.)foo" },
    { "SeeALot", R"foo(kbrosnan: He or she's presumably not active anymore?)foo" },
    { "SeeALot", R"foo(*checking*)foo" },
    { "kbrosnan", R"foo(on irc not so much but I generally have enough permissions to mod the channel)foo" },
    { "oxek", R"foo(kbrosnan: there is nobody on the access list with +F)foo" },
    { "kbrosnan", R"foo(and I can reach that person pretty qucikly)foo" },
    { "SeeALot", R"foo(freenode-placeholder-account, genius. :D)foo" },
    { "kbrosnan", R"foo(let me double check that then :/ been a while since i've looked)foo" },
    { "SeeALot", R"foo(Isn't this prove enough that rasengan was _not_ prepared to run this thing? :D)foo" },
    { "oxek", R"foo(or anyone with +s (those two cloaks apply to people who no longer have those nicks), or some of the other important flags)foo" },
    { "SeeALot", R"foo(*proof)foo" },
    { "oxek", R"foo(SeeALot: he wasn't, but had to because all staff lef)foo" },
    { "kbrosnan", R"foo(freenode-placeholder-account is from over a year ago so not exactly the same as the current chaos)foo" },
    { "oneforall2", R"foo(little late but I have 89 and for me it was some sites didn't want to load till I did a shift refresh)foo" },
    { "SeeALot", R"foo(kbrosnan: Good to know.)foo" },
    { "oxek", R"foo(kbrosnan: that's when the founder dropped their nick)foo" },
    { "oxek", R"foo(well, accoun)foo" },
    { "SeeALot", R"foo(Does any one of you know a certain Ararat?)foo" },
    { "oxek", R"foo(I've seen that nickname around)foo" },
    { "SeeALot", R"foo(He's founder for ##firefox .)foo" },
    { "SeeALot", R"foo(Registered that channel seven years ago, never did anything with it, it seems. (Or maybe it's been somewhat popular in the past?))foo" },
    { "SeeALot", R"foo(kbrosnan: Do you intend to stay?)foo" },
    { "SeeALot", R"foo(If so, we might not need any other channel.)foo" },
    { "oxek", R"foo(SeeALot: I've seen that name on the access lists of a few channels. Seems they registered a lot of the ##channels in advance)foo" },
    { "SeeALot", R"foo(Hm. Seen this coming seven years ago, about the time when PIA first got involved? That level of precognition could make for some serious side business.)foo" },
};
